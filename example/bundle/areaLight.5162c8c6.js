function t(t,e,n,a){Object.defineProperty(t,e,{get:n,set:a,enumerable:!0,configurable:!0})}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},a={},r=e.parcelRequire5b70;null==r&&((r=function(t){if(t in n)return n[t].exports;if(t in a){var e=a[t];delete a[t];var r={id:t,exports:{}};return n[t]=r,e.call(r.exports,r,r.exports),r.exports}var i=new Error("Cannot find module '"+t+"'");throw i.code="MODULE_NOT_FOUND",i}).register=function(t,e){a[t]=e},e.parcelRequire5b70=r),r.register("4CEV9",(function(e,n){t(e.exports,"PathTracingRenderer",(()=>r("hWds8").PathTracingRenderer)),t(e.exports,"DynamicPathTracingSceneGenerator",(()=>r("lDKrr").DynamicPathTracingSceneGenerator)),t(e.exports,"MaterialReducer",(()=>r("62xhu").MaterialReducer)),t(e.exports,"PhysicalCamera",(()=>r("kLfIo").PhysicalCamera)),t(e.exports,"EquirectCamera",(()=>r("3Npwq").EquirectCamera)),t(e.exports,"PhysicalSpotLight",(()=>r("d4kES").PhysicalSpotLight)),t(e.exports,"ShapedAreaLight",(()=>r("iJGcZ").ShapedAreaLight)),t(e.exports,"GradientEquirectTexture",(()=>r("bHiTZ").GradientEquirectTexture)),t(e.exports,"BlurredEnvMapGenerator",(()=>r("eLX8K").BlurredEnvMapGenerator)),t(e.exports,"IESLoader",(()=>r("77Fts").IESLoader)),t(e.exports,"DenoiseMaterial",(()=>r("8zlJq").DenoiseMaterial)),t(e.exports,"GraphMaterial",(()=>r("8jDBa").GraphMaterial)),t(e.exports,"PhysicalPathTracingMaterial",(()=>r("9dwDm").PhysicalPathTracingMaterial)),r("hWds8"),r("lDKrr"),r("62xhu"),r("kLfIo"),r("3Npwq"),r("d4kES"),r("iJGcZ"),r("bHiTZ"),r("eLX8K"),r("77Fts"),r("8zlJq"),r("8jDBa"),r("9dwDm")})),r.register("hWds8",(function(e,n){t(e.exports,"PathTracingRenderer",(()=>u));var a=r("ilwiq"),i=r("RPVlj"),o=r("2JSgM"),s=r("9kitj");function*l(){const{_renderer:t,_fsQuad:e,_blendQuad:n,_primaryTarget:r,_blendTargets:i,_sobolTarget:o,alpha:s,camera:l,material:c}=this,u=n.material;let[h,f]=i;for(;;){s?(u.opacity=1/(this.samples+1),c.blending=a.NoBlending,c.opacity=1):(c.opacity=1/(this.samples+1),c.blending=a.NormalBlending);const i=r.width,m=r.height;c.resolution.set(i,m),c.sobolTexture=o.texture,c.seed++;const d=this.tiles.x||1,p=this.tiles.y||1,g=d*p,v=1/t.getPixelRatio();for(let a=0;a<p;a++)for(let o=0;o<d;o++){c.cameraWorldMatrix.copy(l.matrixWorld),c.invProjectionMatrix.copy(l.projectionMatrixInverse);let x=0;l.projectionMatrix.elements[15]>0&&(x=1),l.isEquirectCamera&&(x=2),c.setDefine("CAMERA_TYPE",x);const b=t.getRenderTarget(),y=t.autoClear;let T=o,w=a;if(!this.stableTiles){const t=this._currentTile%(d*p);T=t%d,w=~~(t/d),this._currentTile=t+1}t.setRenderTarget(r),t.setScissorTest(!0),t.setScissor(v*Math.ceil(T*i/d),v*Math.ceil((p-w-1)*m/p),v*Math.ceil(i/d),v*Math.ceil(m/p)),t.autoClear=!1,e.render(t),t.setScissorTest(!1),t.setRenderTarget(b),t.autoClear=y,s&&(u.target1=h.texture,u.target2=r.texture,t.setRenderTarget(f),n.render(t),t.setRenderTarget(b)),this.samples+=1/g,yield}[h,f]=[f,h],this.samples=Math.round(this.samples)}}const c=new a.Color;class u{get material(){return this._fsQuad.material}set material(t){this._fsQuad.material=t}get target(){return this._alpha?this._blendTargets[1]:this._primaryTarget}set alpha(t){t||(this._blendTargets[0].dispose(),this._blendTargets[1].dispose()),this._alpha=t,this.reset()}get alpha(){return this._alpha}constructor(t){this.camera=null,this.tiles=new a.Vector2(1,1),this.samples=0,this.stableNoise=!1,this.stableTiles=!0,this._renderer=t,this._alpha=!1,this._fsQuad=new i.FullScreenQuad(null),this._blendQuad=new i.FullScreenQuad(new o.BlendMaterial),this._task=null,this._currentTile=0,this._sobolTarget=(new s.SobolNumberMapGenerator).generate(t),this._primaryTarget=new a.WebGLRenderTarget(1,1,{format:a.RGBAFormat,type:a.FloatType}),this._blendTargets=[new a.WebGLRenderTarget(1,1,{format:a.RGBAFormat,type:a.FloatType}),new a.WebGLRenderTarget(1,1,{format:a.RGBAFormat,type:a.FloatType})]}setSize(t,e){this._primaryTarget.setSize(t,e),this._blendTargets[0].setSize(t,e),this._blendTargets[1].setSize(t,e),this.reset()}dispose(){this._primaryTarget.dispose(),this._blendTargets[0].dispose(),this._blendTargets[1].dispose(),this._sobolTarget.dispose(),this._fsQuad.dispose(),this._blendQuad.dispose(),this._task=null}reset(){const{_renderer:t,_primaryTarget:e,_blendTargets:n}=this,a=t.getRenderTarget(),r=t.getClearAlpha();t.getClearColor(c),t.setRenderTarget(e),t.setClearColor(0,0),t.clearColor(),t.setRenderTarget(n[0]),t.setClearColor(0,0),t.clearColor(),t.setRenderTarget(n[1]),t.setClearColor(0,0),t.clearColor(),t.setClearColor(c,r),t.setRenderTarget(a),this.samples=0,this._task=null,this.stableNoise&&(this.material.seed=0)}update(){this._task||(this._task=l.call(this)),this._task.next()}}})),r.register("2JSgM",(function(e,n){t(e.exports,"BlendMaterial",(()=>o));var a=r("ilwiq"),i=r("9fZ6X");class o extends i.MaterialBase{constructor(t){super({blending:a.NoBlending,uniforms:{target1:{value:null},target2:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}",fragmentShader:"\n\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tuniform sampler2D target1;\n\t\t\t\tuniform sampler2D target2;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 color1 = texture2D( target1, vUv );\n\t\t\t\t\tvec4 color2 = texture2D( target2, vUv );\n\n\t\t\t\t\tfloat invOpacity = 1.0 - opacity;\n\t\t\t\t\tfloat totalAlpha = color1.a * invOpacity + color2.a * opacity;\n\n\t\t\t\t\tif ( color1.a != 0.0 || color2.a != 0.0 ) {\n\n\t\t\t\t\t\tgl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );\n\t\t\t\t\t\tgl_FragColor.a = totalAlpha;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}"}),this.setValues(t)}}})),r.register("9kitj",(function(e,n){t(e.exports,"SobolNumberMapGenerator",(()=>c));var a=r("ilwiq"),i=r("RPVlj"),o=r("9fZ6X"),s=r("2CHzc");class l extends o.MaterialBase{constructor(){super({blending:a.NoBlending,uniforms:{resolution:{value:new a.Vector2}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t",fragmentShader:`\n\n\t\t\t\t${s.shaderSobolCommon}\n\t\t\t\t${s.shaderSobolGeneration}\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tuint index = uint( gl_FragCoord.y ) * uint( resolution.x ) + uint( gl_FragCoord.x );\n\t\t\t\t\tgl_FragColor = generateSobolPoint( index );\n\n\t\t\t\t}\n\t\t\t`})}}class c{generate(t,e=256){const n=new a.WebGLRenderTarget(e,e,{type:a.FloatType,format:a.RGBAFormat,minFilter:a.NearestFilter,magFilter:a.NearestFilter,generateMipmaps:!1}),r=t.getRenderTarget();t.setRenderTarget(n);const o=new i.FullScreenQuad(new l);return o.material.resolution.set(e,e),o.render(t),t.setRenderTarget(r),o.dispose(),n}}})),r.register("2CHzc",(function(e,n){function a(t=1){let e="uint";return t>1&&(e="uvec"+t),`\n\t\t${e} sobolReverseBits( ${e} x ) {\n\n\t\t\tx = ( ( ( x & 0xaaaaaaaau ) >> 1 ) | ( ( x & 0x55555555u ) << 1 ) );\n\t\t\tx = ( ( ( x & 0xccccccccu ) >> 2 ) | ( ( x & 0x33333333u ) << 2 ) );\n\t\t\tx = ( ( ( x & 0xf0f0f0f0u ) >> 4 ) | ( ( x & 0x0f0f0f0fu ) << 4 ) );\n\t\t\tx = ( ( ( x & 0xff00ff00u ) >> 8 ) | ( ( x & 0x00ff00ffu ) << 8 ) );\n\t\t\treturn ( ( x >> 16 ) | ( x << 16 ) );\n\n\t\t}\n\n\t\t${e} sobolHashCombine( uint seed, ${e} v ) {\n\n\t\t\treturn seed ^ ( v + ${e}( ( seed << 6 ) + ( seed >> 2 ) ) );\n\n\t\t}\n\n\t\t${e} sobolLaineKarrasPermutation( ${e} x, ${e} seed ) {\n\n\t\t\tx += seed;\n\t\t\tx ^= x * 0x6c50b47cu;\n\t\t\tx ^= x * 0xb82f1e52u;\n\t\t\tx ^= x * 0xc7afe638u;\n\t\t\tx ^= x * 0x8d22f6e6u;\n\t\t\treturn x;\n\n\t\t}\n\n\t\t${e} nestedUniformScrambleBase2( ${e} x, ${e} seed ) {\n\n\t\t\tx = sobolLaineKarrasPermutation( x, seed );\n\t\t\tx = sobolReverseBits( x );\n\t\t\treturn x;\n\n\t\t}\n\t`}function r(t=1){let e="uint",n="float",a="",r=".r",i="1u";return t>1&&(e="uvec"+t,n="vec"+t,a=t+"",2===t?(r=".rg",i="uvec2( 1u, 2u )"):3===t?(r=".rgb",i="uvec3( 1u, 2u, 3u )"):(r="",i="uvec4( 1u, 2u, 3u, 4u )")),`\n\n\t\t${n} sobol${a}( int effect ) {\n\n\t\t\tuint seed = sobolGetSeed( sobolBounceIndex, uint( effect ) );\n\t\t\tuint index = sobolPathIndex;\n\n\t\t\tuint shuffle_seed = sobolHashCombine( seed, 0u );\n\t\t\tuint shuffled_index = nestedUniformScrambleBase2( sobolReverseBits( index ), shuffle_seed );\n\t\t\t${n} sobol_pt = sobolGetTexturePoint( shuffled_index )${r};\n\t\t\t${e} result = ${e}( sobol_pt * 16777216.0 );\n\n\t\t\t${e} seed2 = sobolHashCombine( seed, ${i} );\n\t\t\tresult = nestedUniformScrambleBase2( result, seed2 );\n\n\t\t\treturn SOBOL_FACTOR * ${n}( result >> 8 );\n\n\t\t}\n\t`}t(e.exports,"shaderSobolCommon",(()=>i)),t(e.exports,"shaderSobolGeneration",(()=>o)),t(e.exports,"shaderSobolSampling",(()=>s));const i=`\n\n\t// Utils\n\tconst float SOBOL_FACTOR = 1.0 / 16777216.0;\n\tconst uint SOBOL_MAX_POINTS = 256u * 256u;\n\n\t${a(1)}\n\t${a(2)}\n\t${a(3)}\n\t${a(4)}\n\n\tuint sobolHash( uint x ) {\n\n\t\t// finalizer from murmurhash3\n\t\tx ^= x >> 16;\n\t\tx *= 0x85ebca6bu;\n\t\tx ^= x >> 13;\n\t\tx *= 0xc2b2ae35u;\n\t\tx ^= x >> 16;\n\t\treturn x;\n\n\t}\n\n`,o='\n\n\tconst uint SOBOL_DIRECTIONS_1[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0xa0000000u, 0xf0000000u,\n\t\t0x88000000u, 0xcc000000u, 0xaa000000u, 0xff000000u,\n\t\t0x80800000u, 0xc0c00000u, 0xa0a00000u, 0xf0f00000u,\n\t\t0x88880000u, 0xcccc0000u, 0xaaaa0000u, 0xffff0000u,\n\t\t0x80008000u, 0xc000c000u, 0xa000a000u, 0xf000f000u,\n\t\t0x88008800u, 0xcc00cc00u, 0xaa00aa00u, 0xff00ff00u,\n\t\t0x80808080u, 0xc0c0c0c0u, 0xa0a0a0a0u, 0xf0f0f0f0u,\n\t\t0x88888888u, 0xccccccccu, 0xaaaaaaaau, 0xffffffffu\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_2[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0x60000000u, 0x90000000u,\n\t\t0xe8000000u, 0x5c000000u, 0x8e000000u, 0xc5000000u,\n\t\t0x68800000u, 0x9cc00000u, 0xee600000u, 0x55900000u,\n\t\t0x80680000u, 0xc09c0000u, 0x60ee0000u, 0x90550000u,\n\t\t0xe8808000u, 0x5cc0c000u, 0x8e606000u, 0xc5909000u,\n\t\t0x6868e800u, 0x9c9c5c00u, 0xeeee8e00u, 0x5555c500u,\n\t\t0x8000e880u, 0xc0005cc0u, 0x60008e60u, 0x9000c590u,\n\t\t0xe8006868u, 0x5c009c9cu, 0x8e00eeeeu, 0xc5005555u\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_3[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0xc0000000u, 0x20000000u, 0x50000000u,\n\t\t0xf8000000u, 0x74000000u, 0xa2000000u, 0x93000000u,\n\t\t0xd8800000u, 0x25400000u, 0x59e00000u, 0xe6d00000u,\n\t\t0x78080000u, 0xb40c0000u, 0x82020000u, 0xc3050000u,\n\t\t0x208f8000u, 0x51474000u, 0xfbea2000u, 0x75d93000u,\n\t\t0xa0858800u, 0x914e5400u, 0xdbe79e00u, 0x25db6d00u,\n\t\t0x58800080u, 0xe54000c0u, 0x79e00020u, 0xb6d00050u,\n\t\t0x800800f8u, 0xc00c0074u, 0x200200a2u, 0x50050093u\n\t);\n\n\tconst uint SOBOL_DIRECTIONS_4[ 32 ] = uint[ 32 ](\n\t\t0x80000000u, 0x40000000u, 0x20000000u, 0xb0000000u,\n\t\t0xf8000000u, 0xdc000000u, 0x7a000000u, 0x9d000000u,\n\t\t0x5a800000u, 0x2fc00000u, 0xa1600000u, 0xf0b00000u,\n\t\t0xda880000u, 0x6fc40000u, 0x81620000u, 0x40bb0000u,\n\t\t0x22878000u, 0xb3c9c000u, 0xfb65a000u, 0xddb2d000u,\n\t\t0x78022800u, 0x9c0b3c00u, 0x5a0fb600u, 0x2d0ddb00u,\n\t\t0xa2878080u, 0xf3c9c040u, 0xdb65a020u, 0x6db2d0b0u,\n\t\t0x800228f8u, 0x400b3cdcu, 0x200fb67au, 0xb00ddb9du\n\t);\n\n\tuint getMaskedSobol( uint index, uint directions[ 32 ] ) {\n\n\t\tuint X = 0u;\n\t\tfor ( int bit = 0; bit < 32; bit ++ ) {\n\n\t\t\tuint mask = ( index >> bit ) & 1u;\n\t\t\tX ^= mask * directions[ bit ];\n\n\t\t}\n\t\treturn X;\n\n\t}\n\n\tvec4 generateSobolPoint( uint index ) {\n\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\n\n\t\t\treturn vec4( 0.0 );\n\n\t\t}\n\n\t\t// NOTEL this sobol "direction" is also available but we can\'t write out 5 components\n\t\t// uint x = index & 0x00ffffffu;\n\t\tuint x = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_1 ) ) & 0x00ffffffu;\n\t\tuint y = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_2 ) ) & 0x00ffffffu;\n\t\tuint z = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_3 ) ) & 0x00ffffffu;\n\t\tuint w = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_4 ) ) & 0x00ffffffu;\n\n\t\treturn vec4( x, y, z, w ) * SOBOL_FACTOR;\n\n\t}\n\n',s=`\n\n\t// Seeds\n\tuniform sampler2D sobolTexture;\n\tuint sobolPixelIndex;\n\tuint sobolPathIndex;\n\tuint sobolBounceIndex;\n\n\tuint sobolGetSeed( uint bounce, uint effect ) {\n\n\t\treturn sobolHash(\n\t\t\tsobolHashCombine(\n\t\t\t\tsobolHashCombine(\n\t\t\t\t\tsobolHash( bounce ),\n\t\t\t\t\tsobolPixelIndex\n\t\t\t\t),\n\t\t\t\teffect\n\t\t\t)\n\t\t);\n\n\t}\n\n\tvec4 sobolGetTexturePoint( uint index ) {\n\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\n\n\t\t\tindex = index % SOBOL_MAX_POINTS;\n\n\t\t}\n\n\t\tuvec2 dim = uvec2( textureSize( sobolTexture, 0 ).xy );\n\t\tuint y = index / dim.x;\n\t\tuint x = index - y * dim.x;\n\t\tvec2 uv = vec2( x, y ) / vec2( dim );\n\t\treturn texture( sobolTexture, uv );\n\n\t}\n\n\t${r(1)}\n\t${r(2)}\n\t${r(3)}\n\t${r(4)}\n\n`})),r.register("lDKrr",(function(e,n){t(e.exports,"DynamicPathTracingSceneGenerator",(()=>s));var a=r("ilwiq"),i=r("8Zfx2"),o=r("jM3IF");class s{get initialized(){return Boolean(this.bvh)}constructor(t){this.objects=Array.isArray(t)?t:[t],this.bvh=null,this.geometry=new a.BufferGeometry,this.materials=null,this.textures=null,this.lights=[],this.staticGeometryGenerator=new i.StaticGeometryGenerator(this.objects)}reset(){this.bvh=null,this.geometry.dispose(),this.geometry=new a.BufferGeometry,this.materials=null,this.textures=null,this.lights=[],this.staticGeometryGenerator=new i.StaticGeometryGenerator(this.objects)}dispose(){}generate(){const{objects:t,staticGeometryGenerator:e,geometry:n}=this;if(null===this.bvh){const a=["position","normal","tangent","uv","color"];for(let e=0,n=t.length;e<n;e++)t[e].traverse((t=>{if(t.isMesh){const e=!!t.material.normalMap;o.setCommonAttributes(t.geometry,{attributes:a,normalMapRequired:e})}else(t.isRectAreaLight||t.isSpotLight)&&this.lights.push(t)}));const r=new Set,s=e.getMaterials();s.forEach((t=>{for(const e in t){const n=t[e];n&&n.isTexture&&r.add(n)}})),e.attributes=a,e.generate(n);const l=o.getGroupMaterialIndicesAttribute(n,s,s);return n.setAttribute("materialIndex",l),n.clearGroups(),this.bvh=new i.MeshBVH(n),this.materials=s,this.textures=Array.from(r),{lights:this.lights,bvh:this.bvh,materials:this.materials,textures:this.textures,objects:t}}{const{bvh:a}=this;return e.generate(n),a.refit(),{lights:this.lights,bvh:this.bvh,materials:this.materials,textures:this.textures,objects:t}}}}})),r.register("62xhu",(function(e,n){function a(t){return t.buffer instanceof ArrayBuffer&&"BYTES_PER_ELEMENT"in t}t(e.exports,"MaterialReducer",(()=>r));class r{constructor(){const t=new Set;t.add("uuid"),this.ignoreKeys=t,this.shareTextures=!0,this.textures=[],this.materials=[]}areEqual(t,e){const n=new Set,r=new Set,i=this.ignoreKeys,o=(t,e)=>{if(t===e)return!0;if(t&&e&&t instanceof Object&&e instanceof Object){if(r.has(t)||r.has(e))throw new Error("MaterialReducer: Material is recursive.");const s=t instanceof Element,l=e instanceof Element;if(s||l)return s===l&&t instanceof Image&&e instanceof Image&&t.src===e.src;const c=t instanceof ImageBitmap,u=e instanceof ImageBitmap;if(c||u)return!1;if(t.equals)return t.equals(e);const h=a(t),f=a(e);if(h||f){if(h!==f||t.constructor!==e.constructor||t.length!==e.length)return!1;for(let n=0,a=t.length;n<a;n++)if(t[n]!==e[n])return!1;return!0}r.add(t),r.add(e),n.clear();for(const e in t)!t.hasOwnProperty(e)||t[e]instanceof Function||i.has(e)||n.add(e);for(const t in e)!e.hasOwnProperty(t)||e[t]instanceof Function||i.has(t)||n.add(t);const m=Array.from(n.values());let d=!0;for(const n in m){const a=m[n];if(!i.has(a)&&(d=o(t[a],e[a]),!d))break}return r.delete(t),r.delete(e),d}return!1};return o(t,e)}process(t){const{textures:e,materials:n}=this;let a=0;const r=t=>{let r=null;for(const e in n){const a=n[e];this.areEqual(t,a)&&(r=a)}if(r)return a++,r;if(n.push(t),this.shareTextures)for(const n in t){if(!t.hasOwnProperty(n))continue;const a=t[n];if(a&&a.isTexture&&a.image instanceof Image){let r=null;for(const t in e){const n=e[t];if(this.areEqual(n,a)){r=n;break}}r?t[n]=r:e.push(a)}}return t};return t.traverse((t=>{if(t.isMesh&&t.material){const e=t.material;if(Array.isArray(e))for(let t=0;t<e.length;t++)e[t]=r(e[t]);else t.material=r(e)}})),{replaced:a,retained:n.length}}}})),r.register("kLfIo",(function(e,n){t(e.exports,"PhysicalCamera",(()=>i));var a=r("ilwiq");class i extends a.PerspectiveCamera{set bokehSize(t){this.fStop=this.getFocalLength()/t}get bokehSize(){return this.getFocalLength()/this.fStop}constructor(...t){super(...t),this.fStop=1.4,this.apertureBlades=0,this.apertureRotation=0,this.focusDistance=25,this.anamorphicRatio=1}}})),r.register("3Npwq",(function(e,n){t(e.exports,"EquirectCamera",(()=>i));var a=r("ilwiq");class i extends a.Camera{constructor(){super(),this.isEquirectCamera=!0}}})),r.register("d4kES",(function(e,n){t(e.exports,"PhysicalSpotLight",(()=>i));var a=r("ilwiq");class i extends a.SpotLight{constructor(...t){super(...t),this.iesTexture=null,this.radius=0}}})),r.register("iJGcZ",(function(e,n){t(e.exports,"ShapedAreaLight",(()=>i));var a=r("ilwiq");class i extends a.RectAreaLight{constructor(...t){super(...t),this.isCircular=!1}}})),r.register("bHiTZ",(function(e,n){t(e.exports,"GradientEquirectTexture",(()=>s));var a=r("ilwiq"),i=r("dbdMq");const o=new a.Vector3;class s extends i.ProceduralEquirectTexture{constructor(t=512){super(t,t),this.topColor=(new a.Color).set(16777215),this.bottomColor=(new a.Color).set(0),this.exponent=2,this.generationCallback=(t,e,n,a)=>{o.setFromSpherical(t);const r=.5*o.y+.5;a.lerpColors(this.bottomColor,this.topColor,r**this.exponent)}}copy(t){return super.copy(t),this.topColor.copy(t.topColor),this.bottomColor.copy(t.bottomColor),this}}})),r.register("dbdMq",(function(e,n){t(e.exports,"ProceduralEquirectTexture",(()=>c));var a=r("ilwiq");const i=new a.Vector2,o=new a.Vector2,s=new a.Spherical,l=new a.Color;class c extends a.DataTexture{constructor(t,e){super(new Float32Array(t*e*4),t,e,a.RGBAFormat,a.FloatType,a.EquirectangularReflectionMapping,a.RepeatWrapping,a.ClampToEdgeWrapping,a.LinearFilter,a.LinearFilter),this.generationCallback=null}update(){this.dispose(),this.needsUpdate=!0;const{data:t,width:e,height:n}=this.image;for(let a=0;a<e;a++)for(let r=0;r<n;r++){o.set(e,n),i.set(a/e,r/n),i.x-=.5,i.y=1-i.y,s.theta=2*i.x*Math.PI,s.phi=i.y*Math.PI,s.radius=1,this.generationCallback(s,i,o,l);const c=4*(r*e+a);t[c+0]=l.r,t[c+1]=l.g,t[c+2]=l.b,t[c+3]=1}}copy(t){return super.copy(t),this.generationCallback=t.generationCallback,this}}})),r.register("eLX8K",(function(e,n){t(e.exports,"BlurredEnvMapGenerator",(()=>c));var a=r("ilwiq"),i=r("RPVlj"),o=r("9fZ6X"),s=r("jNhCl");class l extends o.MaterialBase{constructor(){super({uniforms:{envMap:{value:null},blur:{value:0}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}\n\n\t\t\t",fragmentShader:`\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\t\t${s.shaderUtils}\n\n\t\t\t\tuniform sampler2D envMap;\n\t\t\t\tuniform float blur;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 rayDirection = equirectUvToDirection( vUv );\n\t\t\t\t\tgl_FragColor = textureCubeUV( envMap, rayDirection, blur );\n\n\t\t\t\t}\n\n\t\t\t`})}}class c{constructor(t){this.renderer=t,this.pmremGenerator=new a.PMREMGenerator(t),this.copyQuad=new i.FullScreenQuad(new l),this.renderTarget=new a.WebGLRenderTarget(1,1,{type:a.FloatType,format:a.RGBAFormat})}dispose(){this.pmremGenerator.dispose(),this.copyQuad.dispose(),this.renderTarget.dispose()}generate(t,e){const{pmremGenerator:n,renderTarget:r,copyQuad:i,renderer:o}=this,s=n.fromEquirectangular(t),{width:l,height:c}=t.image;r.setSize(l,c),i.material.envMap=s.texture,i.material.blur=e;const u=o.getRenderTarget(),h=o.autoClear;o.setRenderTarget(r),o.autoClear=!0,i.render(o),o.setRenderTarget(u),o.autoClear=h;const f=new Float32Array(l*c*4);o.readRenderTargetPixels(r,0,0,l,c,f);const m=new a.DataTexture(f,l,c,a.RGBAFormat,a.FloatType);return m.minFilter=t.minFilter,m.magFilter=t.magFilter,m.wrapS=t.wrapS,m.wrapT=t.wrapT,m.mapping=a.EquirectangularReflectionMapping,m.needsUpdate=!0,s.dispose(),m}}})),r.register("77Fts",(function(e,n){t(e.exports,"IESLoader",(()=>o));var a=r("ilwiq");function i(t){const e=this,n=t.split("\n");let a,r=0;function i(t){return(t=(t=(t=t.trim()).replace(/,/g," ")).replace(/\s\s+/g," ")).split(" ")}function o(t,e){for(;;){const a=i(n[r++]);for(let t=0;t<a.length;++t)e.push(Number(a[t]));if(e.length===t)break}}for(e.verAngles=[],e.horAngles=[],e.candelaValues=[],e.tiltData={},e.tiltData.angles=[],e.tiltData.mulFactors=[];a=n[r++],!a.includes("TILT"););a.includes("NONE")||a.includes("INCLUDE")&&function(){let t=n[r++],a=i(t);e.tiltData.lampToLumGeometry=Number(a[0]),t=n[r++],a=i(t),e.tiltData.numAngles=Number(a[0]),o(e.tiltData.numAngles,e.tiltData.angles),o(e.tiltData.numAngles,e.tiltData.mulFactors)}(),function(){const t=[];o(10,t),e.count=Number(t[0]),e.lumens=Number(t[1]),e.multiplier=Number(t[2]),e.numVerAngles=Number(t[3]),e.numHorAngles=Number(t[4]),e.gonioType=Number(t[5]),e.units=Number(t[6]),e.width=Number(t[7]),e.length=Number(t[8]),e.height=Number(t[9])}(),function(){const t=[];o(3,t),e.ballFactor=Number(t[0]),e.blpFactor=Number(t[1]),e.inputWatts=Number(t[2])}();for(let t=0;t<e.numHorAngles;++t)e.candelaValues.push([]);o(e.numVerAngles,e.verAngles),o(e.numHorAngles,e.horAngles);for(let t=0;t<e.numHorAngles;++t)o(e.numVerAngles,e.candelaValues[t]);for(let t=0;t<e.numHorAngles;++t)for(let n=0;n<e.numVerAngles;++n)e.candelaValues[t][n]*=e.candelaValues[t][n]*e.multiplier*e.ballFactor*e.blpFactor;let s=-1;for(let t=0;t<e.numHorAngles;++t)for(let n=0;n<e.numVerAngles;++n){const a=e.candelaValues[t][n];s=s<a?a:s}if(s>0)for(let t=0;t<e.numHorAngles;++t)for(let n=0;n<e.numVerAngles;++n)e.candelaValues[t][n]/=s}class o extends a.Loader{_getIESValues(t){const e=new Float32Array(64800);function n(e,n){let r=0,i=0,o=0,s=0,l=0,c=0;for(let e=0;e<t.numHorAngles-1;++e)if(n<t.horAngles[e+1]||e==t.numHorAngles-2){i=e,o=t.horAngles[e],s=t.horAngles[e+1];break}for(let n=0;n<t.numVerAngles-1;++n)if(e<t.verAngles[n+1]||n==t.numVerAngles-2){r=n,l=t.verAngles[n],c=t.verAngles[n+1];break}const u=s-o,h=c-l;if(0===h)return 0;const f=0===u?0:(n-o)/u,m=(e-l)/h,d=0===u?i:i+1,p=a.MathUtils.lerp(t.candelaValues[i][r],t.candelaValues[d][r],f),g=a.MathUtils.lerp(t.candelaValues[i][r+1],t.candelaValues[d][r+1],f);return a.MathUtils.lerp(p,g,m)}const r=t.horAngles[0],i=t.horAngles[t.numHorAngles-1];for(let t=0;t<64800;++t){let a=t%360;const o=Math.floor(t/360);i-r!=0&&(a<r||a>=i)&&(a%=2*i,a>i&&(a=2*i-a)),e[t]=n(o,a)}return e}load(t,e,n,r){const o=new a.FileLoader(this.manager);o.setResponseType("text"),o.setCrossOrigin(this.crossOrigin),o.setWithCredentials(this.withCredentials),o.setPath(this.path),o.setRequestHeader(this.requestHeader);const s=new a.DataTexture(null,360,180,a.RedFormat,a.FloatType);return s.minFilter=a.LinearFilter,s.magFilter=a.LinearFilter,o.load(t,(t=>{const n=new i(t);s.image.data=this._getIESValues(n),s.needsUpdate=!0,void 0!==e&&e(s)}),n,r),s}parse(t){const e=new i(t),n=new a.DataTexture(null,360,180,a.RedFormat,a.FloatType);return n.minFilter=a.LinearFilter,n.magFilter=a.LinearFilter,n.image.data=this._getIESValues(e),n.needsUpdate=!0,n}}})),r.register("8zlJq",(function(e,n){t(e.exports,"DenoiseMaterial",(()=>o));var a=r("ilwiq"),i=r("9fZ6X");class o extends i.MaterialBase{constructor(t){super({blending:a.NoBlending,transparent:!1,depthWrite:!1,depthTest:!1,defines:{USE_SLIDER:0},uniforms:{sigma:{value:5},threshold:{value:.03},kSigma:{value:1},map:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t",fragmentShader:"\n\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\n\t\t\t\t//  All rights reserved.\n\t\t\t\t//\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\n\t\t\t\t//\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\n\t\t\t\t//\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\n\t\t\t\t//\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tuniform float sigma;\n\t\t\t\tuniform float threshold;\n\t\t\t\tuniform float kSigma;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\n\n\t\t\t\t// Parameters:\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\n\t\t\t\t//\t\t kSigma * sigma  --\x3e  radius of the circular kernel\n\t\t\t\t//\t float threshold   - edge sharpening threshold\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\n\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\n\t\t\t\t\tfloat radQ = radius * radius;\n\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\n\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\n\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\n\n\t\t\t\t\tfloat zBuff = 0.0;\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\n\n\t\t\t\t\tvec2 d;\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\n\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\n\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\n\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\n\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\n\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\n\n\t\t\t\t\t\t\tzBuff += deltaFactor;\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn aBuff / zBuff;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <encodings_fragment>\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\n\t\t\t"}),this.setValues(t)}}})),r.register("8jDBa",(function(e,n){t(e.exports,"GraphMaterial",(()=>o));var a=r("ilwiq"),i=r("9fZ6X");class o extends i.MaterialBase{get graphFunctionSnippet(){return this._graphFunctionSnippet}set graphFunctionSnippet(t){this._graphFunctionSnippet=t}constructor(t){super({blending:a.NoBlending,transparent:!1,depthWrite:!1,depthTest:!1,defines:{USE_SLIDER:0},uniforms:{dim:{value:!0},thickness:{value:1},graphCount:{value:4},graphDisplay:{value:new a.Vector4(1,1,1,1)},overlay:{value:!0},xRange:{value:new a.Vector2(-2,2)},yRange:{value:new a.Vector2(-2,2)},colors:{value:[new a.Color(15277667).convertSRGBToLinear(),new a.Color(5025616).convertSRGBToLinear(),new a.Color(240116).convertSRGBToLinear(),new a.Color(16761095).convertSRGBToLinear()]}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\n\t\t\t",fragmentShader:"\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform bool overlay;\n\t\t\t\tuniform bool dim;\n\t\t\t\tuniform bvec4 graphDisplay;\n\t\t\t\tuniform float graphCount;\n\t\t\t\tuniform float thickness;\n\t\t\t\tuniform vec2 xRange;\n\t\t\t\tuniform vec2 yRange;\n\t\t\t\tuniform vec3 colors[ 4 ];\n\n\t\t\t\t__FUNCTION_CONTENT__\n\n\t\t\t\tfloat map( float _min, float _max, float v ) {\n\n\t\t\t\t\tfloat len = _max - _min;\n\t\t\t\t\treturn _min + len * v;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getBackground( vec2 point, float steepness ) {\n\n\t\t\t\t\tvec2 pw = fwidth( point );\n\t\t\t\t\tvec2 halfWidth = pw * 0.5;\n\n\t\t\t\t\t// x, y axes\n\t\t\t\t\tvec2 distToZero = smoothstep(\n\t\t\t\t\t\t- halfWidth * 0.5,\n\t\t\t\t\t\thalfWidth * 0.5,\n\t\t\t\t\t\tabs( point.xy ) - pw\n\t\t\t\t\t);\n\n\t\t\t\t\t// 1 unit markers\n\t\t\t\t\tvec2 temp;\n\t\t\t\t\tvec2 modAxis = abs( modf( point + vec2( 0.5 ), temp ) ) - 0.5;\n\t\t\t\t\tvec2 distToAxis = smoothstep(\n\t\t\t\t\t\t- halfWidth,\n\t\t\t\t\t\thalfWidth,\n\t\t\t\t\t\tabs( modAxis.xy ) - pw * 0.5\n\t\t\t\t\t);\n\n\t\t\t\t\t// if we're at a chart boundary then remove the artifacts\n\t\t\t\t\tif ( abs( pw.y ) > steepness * 0.5 ) {\n\n\t\t\t\t\t\tdistToZero.y = 1.0;\n\t\t\t\t\t\tdistToAxis.y = 1.0;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// mix colors into a background color\n\t\t\t\t\tfloat axisIntensity = 1.0 - min( distToZero.x, distToZero.y );\n\t\t\t\t\tfloat markerIntensity = 1.0 - min( distToAxis.x, distToAxis.y );\n\n\t\t\t\t\tvec3 markerColor = mix( vec3( 0.005 ), vec3( 0.05 ), markerIntensity );\n\t\t\t\t\tvec3 backgroundColor = mix( markerColor, vec3( 0.2 ), axisIntensity );\n\t\t\t\t\treturn backgroundColor;\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t// from uniforms\n\t\t\t\t\tfloat sectionCount = overlay ? 1.0 : graphCount;\n\t\t\t\t\tfloat yWidth = abs( yRange.y - yRange.x );\n\n\t\t\t\t\t// separate into sections\n\t\t\t\t\tfloat _section;\n\t\t\t\t\tfloat sectionY = modf( sectionCount * vUv.y, _section );\n\t\t\t\t\tint section = int( sectionCount - _section - 1.0 );\n\n\t\t\t\t\t// get the current point\n\t\t\t\t\tvec2 point = vec2(\n\t\t\t\t\t\tmap( xRange.x, xRange.y, vUv.x ),\n\t\t\t\t\t\tmap( yRange.x, yRange.y, sectionY )\n\t\t\t\t\t);\n\n\t\t\t\t\t// get the results\n\t\t\t\t\tvec4 result = graphFunction( point.x );\n\t\t\t\t\tvec4 delta = result - vec4( point.y );\n\t\t\t\t\tvec4 halfDdf = fwidth( delta ) * 0.5;\n\t\t\t\t\tif ( fwidth( point.y ) > yWidth * 0.5 ) {\n\n\t\t\t\t\t\thalfDdf = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// graph display intensity\n\t\t\t\t\tvec4 graph = smoothstep( - halfDdf, halfDdf, abs( delta ) - thickness * halfDdf );\n\n\t\t\t\t\t// initialize the background\n\t\t\t\t\tgl_FragColor.rgb = getBackground( point, yWidth );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\tif ( dim && ( point.x < 0.0 || point.y < 0.0 ) ) {\n\n\t\t\t\t\t\tgraph = mix(\n\t\t\t\t\t\t\tvec4( 1.0 ),\n\t\t\t\t\t\t\tgraph,\n\t\t\t\t\t\t\t0.05\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// color the charts\n\t\t\t\t\tif ( sectionCount > 1.0 ) {\n\n\t\t\t\t\t\tif ( graphDisplay[ section ] ) {\n\n\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\tcolors[ section ],\n\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\tgraph[ section ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( int i = 0; i < int( graphCount ); i ++ ) {\n\n\t\t\t\t\t\t\tif ( graphDisplay[ i ] ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb = mix(\n\t\t\t\t\t\t\t\t\tcolors[ i ],\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb,\n\t\t\t\t\t\t\t\t\tgraph[ i ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t#include <encodings_fragment>\n\n\t\t\t\t}\n\n\t\t\t"}),this._graphFunctionSnippet="\n\t\t\tvec4 graphFunctionSnippet( float x ) {\n\n\t\t\t\treturn vec4(\n\t\t\t\t\tsin( x * 3.1415926535 ),\n\t\t\t\t\tcos( x ),\n\t\t\t\t\t0.0,\n\t\t\t\t\t0.0\n\t\t\t\t);\n\n\t\t\t}\n\t\t",this.setValues(t)}onBeforeCompile(t){return t.fragmentShader=t.fragmentShader.replace("__FUNCTION_CONTENT__",this._graphFunctionSnippet),t}customProgramCacheKey(){return this._graphFunctionSnippet}}})),r.register("9dwDm",(function(e,n){t(e.exports,"PhysicalPathTracingMaterial",(()=>w));var a=r("ilwiq"),i=r("9fZ6X"),o=r("8Zfx2"),s=r("5Wq6T"),l=r("laA5G"),c=r("12pjC"),u=r("fcAdp"),h=r("1RTaa"),f=r("22srR"),m=r("2CHzc"),d=r("jNhCl"),p=r("9XfmY"),g=r("aRxvh"),v=r("iyhQ7"),x=r("kAJM1"),b=r("TWVPU"),y=r("8nCwU"),T=r("6Q19u");class w extends i.MaterialBase{onBeforeRender(){this.setDefine("FEATURE_DOF",0===this.physicalCamera.bokehSize?0:1),this.setDefine("FEATURE_BACKGROUND_MAP",this.backgroundMap?1:0)}constructor(t){super({transparent:!0,depthWrite:!1,defines:{FEATURE_MIS:1,FEATURE_DOF:1,FEATURE_BACKGROUND_MAP:0,TRANSPARENT_TRAVERSALS:5,CAMERA_TYPE:0,ATTR_NORMAL:0,ATTR_TANGENT:1,ATTR_UV:2,ATTR_COLOR:3},uniforms:{resolution:{value:new a.Vector2},bounces:{value:3},physicalCamera:{value:new v.PhysicalCameraUniform},bvh:{value:new o.MeshBVHUniformStruct},attributesArray:{value:new T.AttributesTextureArray},materialIndexAttribute:{value:new o.UIntVertexAttributeTexture},materials:{value:new l.MaterialsTexture},textures:{value:(new c.RenderTarget2DArray).texture},lights:{value:new b.LightsInfoUniformStruct},iesProfiles:{value:(new y.IESProfilesTexture).texture},cameraWorldMatrix:{value:new a.Matrix4},invProjectionMatrix:{value:new a.Matrix4},backgroundBlur:{value:0},environmentIntensity:{value:1},environmentRotation:{value:new a.Matrix4},envMapInfo:{value:new x.EquirectHdrInfoUniform},backgroundMap:{value:null},seed:{value:0},opacity:{value:1},filterGlossyFactor:{value:0},backgroundAlpha:{value:1},sobolTexture:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\tvUv = uv;\n\n\t\t\t\t}\n\n\t\t\t",fragmentShader:`\n\t\t\t\t#define RAY_OFFSET 1e-4\n\n\t\t\t\tprecision highp isampler2D;\n\t\t\t\tprecision highp usampler2D;\n\t\t\t\tprecision highp sampler2DArray;\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\t\t\t\t#include <common>\n\n\t\t\t\t${g.shaderRandFunctions}\n\t\t\t\t${m.shaderSobolCommon}\n\t\t\t\t${m.shaderSobolSampling}\n\t\t\t\t${o.shaderStructs}\n\t\t\t\t${o.shaderIntersectFunction}\n\t\t\t\t${s.shaderMaterialStructs}\n\t\t\t\t${s.shaderLightStruct}\n\n\t\t\t\t${p.shaderLayerTexelFetchFunctions}\n\t\t\t\t${d.shaderUtils}\n\t\t\t\t${u.shaderMaterialSampling}\n\t\t\t\t${h.shaderEnvMapSampling}\n\n\t\t\t\tuniform mat4 environmentRotation;\n\t\t\t\tuniform float backgroundBlur;\n\t\t\t\tuniform float backgroundAlpha;\n\n\t\t\t\t#if FEATURE_BACKGROUND_MAP\n\n\t\t\t\tuniform sampler2D backgroundMap;\n\n\t\t\t\t#endif\n\n\t\t\t\t#if FEATURE_DOF\n\n\t\t\t\tuniform PhysicalCamera physicalCamera;\n\n\t\t\t\t#endif\n\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform int bounces;\n\t\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\t\tuniform sampler2DArray attributesArray;\n\t\t\t\tuniform usampler2D materialIndexAttribute;\n\t\t\t\tuniform BVH bvh;\n\t\t\t\tuniform float environmentIntensity;\n\t\t\t\tuniform float filterGlossyFactor;\n\t\t\t\tuniform int seed;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform sampler2D materials;\n\t\t\t\tuniform LightsInfo lights;\n\t\t\t\tuniform sampler2DArray iesProfiles;\n\n\t\t\t\t${f.shaderLightSampling}\n\n\t\t\t\tuniform EquirectHdrInfo envMapInfo;\n\n\t\t\t\tuniform sampler2DArray textures;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat applyFilteredGlossy( float roughness, float accumulatedRoughness ) {\n\n\t\t\t\t\treturn clamp(\n\t\t\t\t\t\tmax(\n\t\t\t\t\t\t\troughness,\n\t\t\t\t\t\t\taccumulatedRoughness * filterGlossyFactor * 5.0 ),\n\t\t\t\t\t\t0.0,\n\t\t\t\t\t\t1.0\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tvec3 sampleBackground( vec3 direction, vec2 uv ) {\n\n\t\t\t\t\tvec3 sampleDir = normalize( direction + getHemisphereSample( direction, uv ) * 0.5 * backgroundBlur );\n\n\t\t\t\t\t#if FEATURE_BACKGROUND_MAP\n\n\t\t\t\t\treturn sampleEquirectEnvMapColor( sampleDir, backgroundMap );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\treturn environmentIntensity * sampleEquirectEnvMapColor( sampleDir, envMapInfo.map );\n\n\t\t\t\t\t#endif\n\n\t\t\t\t}\n\n\t\t\t\t// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces\n\t\t\t\tbool attenuateHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection, int traversals, bool isShadowRay, out vec3 color ) {\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\tcolor = vec3( 1.0 );\n\n\t\t\t\t\t// TODO: we should be using sobol sampling here instead of rand but the sobol bounce and path indices need to be incremented\n\t\t\t\t\t// and then reset.\n\t\t\t\t\tfor ( int i = 0; i < traversals; i ++ ) {\n\n\t\t\t\t\t\tif ( bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\t\t// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values\n\t\t\t\t\t\t\t// Should be able to work using the material BSDF functions which will take into account specularity, etc.\n\t\t\t\t\t\t\t// TODO: should we account for emissive surfaces here?\n\n\t\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, barycoord, faceIndices.xyz );\n\n\t\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\t\t// adjust the ray to the new surface\n\t\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Opacity Test\n\n\t\t\t\t\t\t\t// albedo\n\t\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t\t\talbedo *= vertexColor;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transmission\n\t\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// metalness\n\t\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\t\tfloat transmissionFactor = ( 1.0 - metalness ) * transmission;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttransmissionFactor < rand() && ! (\n\t\t\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\t\t\tmaterial.side != 0.0 && side == material.side\n\n\t\t\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( side == 1.0 && isBelowSurface ) {\n\n\t\t\t\t\t\t\t\t// only attenuate by surface color on the way in\n\t\t\t\t\t\t\t\tcolor *= mix( vec3( 1.0 ), albedo.rgb, transmissionFactor );\n\n\t\t\t\t\t\t\t} else if ( side == - 1.0 ) {\n\n\t\t\t\t\t\t\t\t// attenuate by medium once we hit the opposite side of the model\n\t\t\t\t\t\t\t\tcolor *= transmissionAttenuation( dist, material.attenuationColor, material.attenuationDistance );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\t// returns whether the ray hit anything before a certain distance, not just the first surface. Could be optimized to not check the full hierarchy.\n\t\t\t\tbool anyCloserHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection, float maxDist ) {\n\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\t\t\t\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\t\t\t\t\treturn hit && dist < maxDist;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 ndcToRayOrigin( vec2 coord ) {\n\n\t\t\t\t\tvec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );\n\t\t\t\t\treturn rayOrigin4.xyz / rayOrigin4.w;\n\t\t\t\t}\n\n\t\t\t\tvoid getCameraRay( out vec3 rayDirection, out vec3 rayOrigin ) {\n\n\t\t\t\t\tvec2 ssd = vec2( 1.0 ) / resolution;\n\n\t\t\t\t\t// Jitter the camera ray by finding a uv coordinate at a random sample\n\t\t\t\t\t// around this pixel's UV coordinate for AA\n\t\t\t\t\tvec2 ruv = sobol2( 0 );\n\t\t\t\t\tvec2 jitteredUv = vUv + vec2( tentFilter( ruv.x ) * ssd.x, tentFilter( ruv.y ) * ssd.y );\n\n\t\t\t\t\t#if CAMERA_TYPE == 2\n\n\t\t\t\t\t\t// Equirectangular projection\n\t\t\t\t\t\tvec4 rayDirection4 = vec4( equirectUvToDirection( jitteredUv ), 0.0 );\n\t\t\t\t\t\tvec4 rayOrigin4 = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\t\t\trayDirection4 = cameraWorldMatrix * rayDirection4;\n\t\t\t\t\t\trayOrigin4 = cameraWorldMatrix * rayOrigin4;\n\n\t\t\t\t\t\trayDirection = normalize( rayDirection4.xyz );\n\t\t\t\t\t\trayOrigin = rayOrigin4.xyz / rayOrigin4.w;\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\t// get [- 1, 1] normalized device coordinates\n\t\t\t\t\t\tvec2 ndc = 2.0 * jitteredUv - vec2( 1.0 );\n\t\t\t\t\t\trayOrigin = ndcToRayOrigin( ndc );\n\n\t\t\t\t\t\t#if CAMERA_TYPE == 1\n\n\t\t\t\t\t\t\t// Orthographic projection\n\t\t\t\t\t\t\trayDirection = ( cameraWorldMatrix * vec4( 0.0, 0.0, - 1.0, 0.0 ) ).xyz;\n\t\t\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t// Perspective projection\n\t\t\t\t\t\t\trayDirection = normalize( mat3(cameraWorldMatrix) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );\n\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if FEATURE_DOF\n\t\t\t\t\t{\n\n\t\t\t\t\t\t// depth of field\n\t\t\t\t\t\tvec3 focalPoint = rayOrigin + normalize( rayDirection ) * physicalCamera.focusDistance;\n\n\t\t\t\t\t\t// get the aperture sample\n\t\t\t\t\t\t// if blades === 0 then we assume a circle\n\t\t\t\t\t\tvec3 shapeUVW= sobol3( 1 );\n\t\t\t\t\t\tint blades = physicalCamera.apertureBlades;\n\t\t\t\t\t\tfloat anamorphicRatio = physicalCamera.anamorphicRatio;\n\t\t\t\t\t\tvec2 apertureSample = blades == 0 ? sampleCircle( shapeUVW.xy ) : sampleRegularNGon( blades, shapeUVW );\n\t\t\t\t\t\tapertureSample *= physicalCamera.bokehSize * 0.5 * 1e-3;\n\n\t\t\t\t\t\t// rotate the aperture shape\n\t\t\t\t\t\tapertureSample =\n\t\t\t\t\t\t\trotateVector( apertureSample, physicalCamera.apertureRotation ) *\n\t\t\t\t\t\t\tsaturate( vec2( anamorphicRatio, 1.0 / anamorphicRatio ) );\n\n\t\t\t\t\t\t// create the new ray\n\t\t\t\t\t\trayOrigin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;\n\t\t\t\t\t\trayDirection = focalPoint - rayOrigin;\n\n\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\n\t\t\t\t\tsobolPixelIndex = ( uint( gl_FragCoord.x ) << 16 ) | ( uint( gl_FragCoord.y ) );\n\t\t\t\t\tsobolPathIndex = uint( seed );\n\n\t\t\t\t\tvec3 rayDirection;\n\t\t\t\t\tvec3 rayOrigin;\n\n\t\t\t\t\tgetCameraRay( rayDirection, rayOrigin );\n\n\t\t\t\t\t// inverse environment rotation\n\t\t\t\t\tmat3 envRotation3x3 = mat3( environmentRotation );\n\t\t\t\t\tmat3 invEnvRotation3x3 = inverse( envRotation3x3 );\n\n\t\t\t\t\t// final color\n\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\t// path tracing state\n\t\t\t\t\tfloat accumulatedRoughness = 0.0;\n\t\t\t\t\tfloat accumulatedClearcoatRoughness = 0.0;\n\t\t\t\t\tbool transmissiveRay = true;\n\t\t\t\t\tint transparentTraversals = TRANSPARENT_TRAVERSALS;\n\t\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\t\tSampleRec sampleRec;\n\t\t\t\t\tint i;\n\t\t\t\t\tbool isShadowRay = false;\n\n\t\t\t\t\tfor ( i = 0; i < bounces; i ++ ) {\n\n\t\t\t\t\t\tsobolBounceIndex ++;\n\n\t\t\t\t\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\n\t\t\t\t\t\tLightSampleRec lightHit = lightsClosestHit( lights.tex, lights.count, rayOrigin, rayDirection );\n\n\t\t\t\t\t\tif ( lightHit.hit && ( lightHit.dist < dist || !hit ) ) {\n\n\t\t\t\t\t\t\tif ( i == 0 || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// NOTE: we skip MIS for punctual lights since they are not supported in forward PT case\n\t\t\t\t\t\t\t\tif ( lightHit.type == SPOT_LIGHT_TYPE || lightHit.type == DIR_LIGHT_TYPE || lightHit.type == POINT_LIGHT_TYPE ) {\n\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// weight the contribution\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, lightHit.pdf / float( lights.count + 1u ) );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightHit.emission * throughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! hit ) {\n\n\t\t\t\t\t\t\tif ( i == 0 || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += sampleBackground( envRotation3x3 * rayDirection, sobol2( 2 ) ) * throughputColor;\n\t\t\t\t\t\t\t\tgl_FragColor.a = backgroundAlpha;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// get the PDF of the hit envmap point\n\t\t\t\t\t\t\t\tvec3 envColor;\n\t\t\t\t\t\t\t\tfloat envPdf = sampleEnvMap( envMapInfo, envRotation3x3 * rayDirection, envColor );\n\t\t\t\t\t\t\t\tenvPdf /= float( lights.count + 1u );\n\n\t\t\t\t\t\t\t\t// and weight the contribution\n\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, envPdf );\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += environmentIntensity * envColor * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb +=\n\t\t\t\t\t\t\t\t\tenvironmentIntensity *\n\t\t\t\t\t\t\t\t\tsampleEquirectEnvMapColor( envRotation3x3 * rayDirection, envMapInfo.map ) *\n\t\t\t\t\t\t\t\t\tthroughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\tif ( material.matte && i == 0 ) {\n\n\t\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we've determined that this is a shadow ray and we've hit an item with no shadow casting\n\t\t\t\t\t\t// then skip it\n\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// uv coord for textures\n\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, barycoord, faceIndices.xyz );\n\n\t\t\t\t\t\t// albedo\n\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material.vertexColors ) {\n\n\t\t\t\t\t\t\talbedo *= vertexColor;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\tif ( material.alphaMap != - 1 ) {\n\n\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side\n\t\t\t\t\t\t// and it's single sided.\n\t\t\t\t\t\t// - alpha test is disabled when it === 0\n\t\t\t\t\t\t// - the material sidedness test is complicated because we want light to pass through the back side but still\n\t\t\t\t\t\t// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray\n\t\t\t\t\t\t// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.\n\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\tmaterial.side != 0.0 && side != material.side\n\n\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < sobol( 3 )\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\t// only allow a limited number of transparency discards otherwise we could\n\t\t\t\t\t\t\t// crash the context with too long a loop.\n\t\t\t\t\t\t\ti -= sign( transparentTraversals );\n\t\t\t\t\t\t\ttransparentTraversals -= sign( transparentTraversals );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\t\tvec3 normal = normalize( textureSampleBarycoord(\n\t\t\t\t\t\t\tattributesArray,\n\t\t\t\t\t\t\tATTR_NORMAL,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz );\n\n\t\t\t\t\t\t// roughness\n\t\t\t\t\t\tfloat roughness = material.roughness;\n\t\t\t\t\t\tif ( material.roughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\troughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// metalness\n\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// emission\n\t\t\t\t\t\tvec3 emission = material.emissiveIntensity * material.emissive;\n\t\t\t\t\t\tif ( material.emissiveMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\temission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// transmission\n\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// normal\n\t\t\t\t\t\tif ( material.flatShading ) {\n\n\t\t\t\t\t\t\t// if we're rendering a flat shaded object then use the face normals - the face normal\n\t\t\t\t\t\t\t// is provided based on the side the ray hits the mesh so flip it to align with the\n\t\t\t\t\t\t\t// interpolated vertex normals.\n\t\t\t\t\t\t\tnormal = faceNormal * side;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvec3 baseNormal = normal;\n\t\t\t\t\t\tif ( material.normalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\tattributesArray,\n\t\t\t\t\t\t\t\tATTR_TANGENT,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.normalScale;\n\t\t\t\t\t\t\t\tnormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnormal *= side;\n\n\t\t\t\t\t\t// clearcoat\n\t\t\t\t\t\tfloat clearcoat = material.clearcoat;\n\t\t\t\t\t\tif ( material.clearcoatMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tclearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// clearcoatRoughness\n\t\t\t\t\t\tfloat clearcoatRoughness = material.clearcoatRoughness;\n\t\t\t\t\t\tif ( material.clearcoatRoughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatRoughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tclearcoatRoughness *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatRoughnessMap ) ).g;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// clearcoatNormal\n\t\t\t\t\t\tvec3 clearcoatNormal = baseNormal;\n\t\t\t\t\t\tif ( material.clearcoatNormalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\tattributesArray,\n\t\t\t\t\t\t\t\tATTR_TANGENT,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( clearcoatNormal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.clearcoatNormalMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.clearcoatNormalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.clearcoatNormalScale;\n\t\t\t\t\t\t\t\tclearcoatNormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclearcoatNormal *= side;\n\n\t\t\t\t\t\t// sheenColor\n\t\t\t\t\t\tvec3 sheenColor = material.sheenColor;\n\t\t\t\t\t\tif ( material.sheenColorMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.sheenColorMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tsheenColor *= texture2D( textures, vec3( uvPrime.xy, material.sheenColorMap ) ).rgb;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// sheenRoughness\n\t\t\t\t\t\tfloat sheenRoughness = material.sheenRoughness;\n\t\t\t\t\t\tif ( material.sheenRoughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.sheenRoughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tsheenRoughness *= texture2D( textures, vec3( uvPrime.xy, material.sheenRoughnessMap ) ).a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// iridescence\n\t\t\t\t\t\tfloat iridescence = material.iridescence;\n\t\t\t\t\t\tif ( material.iridescenceMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.iridescenceMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tiridescence *= texture2D( textures, vec3( uvPrime.xy, material.iridescenceMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// iridescence thickness\n\t\t\t\t\t\tfloat iridescenceThickness = material.iridescenceThicknessMaximum;\n\t\t\t\t\t\tif ( material.iridescenceThicknessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.iridescenceThicknessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tfloat iridescenceThicknessSampled = texture2D( textures, vec3( uvPrime.xy, material.iridescenceThicknessMap ) ).g;\n\t\t\t\t\t\t\tiridescenceThickness = mix( material.iridescenceThicknessMinimum, material.iridescenceThicknessMaximum, iridescenceThicknessSampled );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tiridescence = iridescenceThickness == 0.0 ? 0.0 : iridescence;\n\n\t\t\t\t\t\t// specular color\n\t\t\t\t\t\tvec3 specularColor = material.specularColor;\n\t\t\t\t\t\tif ( material.specularColorMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.specularColorMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tspecularColor *= texture2D( textures, vec3( uvPrime.xy, material.specularColorMap ) ).rgb;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// specular intensity\n\t\t\t\t\t\tfloat specularIntensity = material.specularIntensity;\n\t\t\t\t\t\tif ( material.specularIntensityMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.specularIntensityMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tspecularIntensity *= texture2D( textures, vec3( uvPrime.xy, material.specularIntensityMap ) ).a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tSurfaceRec surfaceRec;\n\t\t\t\t\t\tsurfaceRec.normal = normal;\n\t\t\t\t\t\tsurfaceRec.faceNormal = faceNormal;\n\t\t\t\t\t\tsurfaceRec.transmission = transmission;\n\t\t\t\t\t\tsurfaceRec.ior = material.ior;\n\t\t\t\t\t\tsurfaceRec.emission = emission;\n\t\t\t\t\t\tsurfaceRec.metalness = metalness;\n\t\t\t\t\t\tsurfaceRec.color = albedo.rgb;\n\t\t\t\t\t\tsurfaceRec.clearcoat = clearcoat;\n\t\t\t\t\t\tsurfaceRec.sheenColor = sheenColor;\n\t\t\t\t\t\tsurfaceRec.iridescence = iridescence;\n\t\t\t\t\t\tsurfaceRec.iridescenceIor = material.iridescenceIor;\n\t\t\t\t\t\tsurfaceRec.iridescenceThickness = iridescenceThickness;\n\t\t\t\t\t\tsurfaceRec.specularColor = specularColor;\n\t\t\t\t\t\tsurfaceRec.specularIntensity = specularIntensity;\n\t\t\t\t\t\tsurfaceRec.attenuationColor = material.attenuationColor;\n\t\t\t\t\t\tsurfaceRec.attenuationDistance = material.attenuationDistance;\n\n\t\t\t\t\t\t// apply perceptual roughness factor from gltf\n\t\t\t\t\t\t// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#microfacet-surfaces\n\t\t\t\t\t\tsurfaceRec.roughness = roughness * roughness;\n\t\t\t\t\t\tsurfaceRec.clearcoatRoughness = clearcoatRoughness * clearcoatRoughness;\n\t\t\t\t\t\tsurfaceRec.sheenRoughness = sheenRoughness * sheenRoughness;\n\n\t\t\t\t\t\t// frontFace is used to determine transmissive properties and PDF. If no transmission is used\n\t\t\t\t\t\t// then we can just always assume this is a front face.\n\t\t\t\t\t\tsurfaceRec.frontFace = side == 1.0 || transmission == 0.0;\n\t\t\t\t\t\tsurfaceRec.eta = material.thinFilm || surfaceRec.frontFace ? 1.0 / material.ior : material.ior;\n\t\t\t\t\t\tsurfaceRec.f0 = iorRatioToF0( surfaceRec.eta );\n\t\t\t\t\t\tsurfaceRec.thinFilm = material.thinFilm;\n\n\t\t\t\t\t\t// Compute the filtered roughness value to use during specular reflection computations.\n\t\t\t\t\t\t// The accumulated roughness value is scaled by a user setting and a "magic value" of 5.0.\n\t\t\t\t\t\t// If we're exiting something transmissive then scale the factor down significantly so we can retain\n\t\t\t\t\t\t// sharp internal reflections\n\t\t\t\t\t\tsurfaceRec.filteredRoughness = applyFilteredGlossy( surfaceRec.roughness, accumulatedRoughness );\n\t\t\t\t\t\tsurfaceRec.filteredClearcoatRoughness = applyFilteredGlossy( surfaceRec.clearcoatRoughness, accumulatedClearcoatRoughness );\n\n\t\t\t\t\t\tmat3 normalBasis = getBasisFromNormal( surfaceRec.normal );\n\t\t\t\t\t\tmat3 invBasis = inverse( normalBasis );\n\n\t\t\t\t\t\tmat3 clearcoatNormalBasis = getBasisFromNormal( clearcoatNormal );\n\t\t\t\t\t\tmat3 clearcoatInvBasis = inverse( clearcoatNormalBasis );\n\n\t\t\t\t\t\tvec3 outgoing = - normalize( invBasis * rayDirection );\n\t\t\t\t\t\tvec3 clearcoatOutgoing = - normalize( clearcoatInvBasis * rayDirection );\n\t\t\t\t\t\tsampleRec = bsdfSample( outgoing, clearcoatOutgoing, normalBasis, invBasis, clearcoatNormalBasis, clearcoatInvBasis, surfaceRec );\n\n\t\t\t\t\t\tisShadowRay = sampleRec.specularPdf < sobol( 4 );\n\n\t\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t\t// error as values increase.\n\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\trayDirection = normalize( normalBasis * sampleRec.direction );\n\n\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t// direct env map sampling\n\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t// uniformly pick a light or environment map\n\t\t\t\t\t\tif( sobol( 5 ) > 1.0 / float( lights.count + 1u ) ) {\n\n\t\t\t\t\t\t\t// sample a light or environment\n\t\t\t\t\t\t\tLightSampleRec lightSampleRec = randomLightSample( lights.tex, iesProfiles, lights.count, rayOrigin, sobol3( 6 ) );\n\n\t\t\t\t\t\t\tbool isSampleBelowSurface = dot( faceNormal, lightSampleRec.direction ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tlightSampleRec.pdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the light area\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlightSampleRec.pdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( lightSampleRec.direction, normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! anyCloserHit( bvh, rayOrigin, lightSampleRec.direction, lightSampleRec.dist )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat lightMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * lightSampleRec.direction ), normalize( clearcoatInvBasis * lightSampleRec.direction ), surfaceRec, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( lightMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tfloat lightPdf = lightSampleRec.pdf / float( lights.count + 1u );\n\t\t\t\t\t\t\t\t\tfloat misWeight = lightSampleRec.type == SPOT_LIGHT_TYPE || lightSampleRec.type == DIR_LIGHT_TYPE || lightSampleRec.type == POINT_LIGHT_TYPE ? 1.0 : misHeuristic( lightPdf, lightMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightSampleRec.emission * throughputColor * sampleColor * misWeight / lightPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// find a sample in the environment map to include in the contribution\n\t\t\t\t\t\t\tvec3 envColor, envDirection;\n\t\t\t\t\t\t\tfloat envPdf = sampleEnvMapProbability( envMapInfo, sobol2( 7 ), envColor, envDirection );\n\t\t\t\t\t\t\tenvDirection = invEnvRotation3x3 * envDirection;\n\n\t\t\t\t\t\t\t// this env sampling is not set up for transmissive sampling and yields overly bright\n\t\t\t\t\t\t\t// results so we ignore the sample in this case.\n\t\t\t\t\t\t\t// TODO: this should be improved but how? The env samples could traverse a few layers?\n\t\t\t\t\t\t\tbool isSampleBelowSurface = dot( faceNormal, envDirection ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tenvPdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the surface\n\t\t\t\t\t\t\tvec3 attenuatedColor;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tenvPdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( envDirection, normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! attenuateHit( bvh, rayOrigin, envDirection, bounces - i, isShadowRay, attenuatedColor )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat envMaterialPdf = bsdfResult( outgoing, clearcoatOutgoing, normalize( invBasis * envDirection ), normalize( clearcoatInvBasis * envDirection ), surfaceRec, sampleColor );\n\t\t\t\t\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\n\t\t\t\t\t\t\t\tif ( envMaterialPdf > 0.0 && isValidSampleColor ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tenvPdf /= float( lights.count + 1u );\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( envPdf, envMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += attenuatedColor * environmentIntensity * envColor * throughputColor * sampleColor * misWeight / envPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution\n\t\t\t\t\t\t// to a single pixel resulting in fireflies\n\t\t\t\t\t\tif ( ! isBelowSurface ) {\n\n\t\t\t\t\t\t\t// determine if this is a rough normal or not by checking how far off straight up it is\n\t\t\t\t\t\t\tvec3 halfVector = normalize( outgoing + sampleRec.direction );\n\t\t\t\t\t\t\taccumulatedRoughness += sin( acosApprox( halfVector.z ) );\n\n\t\t\t\t\t\t\tvec3 clearcoatHalfVector = normalize( clearcoatOutgoing + sampleRec.clearcoatDirection );\n\t\t\t\t\t\t\taccumulatedClearcoatRoughness += sin( acosApprox( clearcoatHalfVector.z ) );\n\n\t\t\t\t\t\t\ttransmissiveRay = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// accumulate color\n\t\t\t\t\t\tgl_FragColor.rgb += ( emission * throughputColor );\n\n\t\t\t\t\t\t// skip the sample if our PDF or ray is impossible\n\t\t\t\t\t\tif ( sampleRec.pdf <= 0.0 || ! isDirectionValid( rayDirection, normal, faceNormal) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthroughputColor *= sampleRec.color / sampleRec.pdf;\n\n\t\t\t\t\t\t// attenuate the throughput color by the medium color\n\t\t\t\t\t\tif ( side == - 1.0 ) {\n\n\t\t\t\t\t\t\tthroughputColor *= transmissionAttenuation( dist, surfaceRec.attenuationColor, surfaceRec.attenuationDistance );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// discard the sample if there are any NaNs\n\t\t\t\t\t\tif ( any( isnan( throughputColor ) ) || any( isinf( throughputColor ) ) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`}),this.setValues(t)}}})),r.register("laA5G",(function(e,n){t(e.exports,"MaterialsTexture",(()=>s));var a=r("ilwiq"),i=r("kOapr");const o=180;class s extends a.DataTexture{constructor(){super(new Float32Array(4),1,1),this.format=a.RGBAFormat,this.type=a.FloatType,this.wrapS=a.ClampToEdgeWrapping,this.wrapT=a.ClampToEdgeWrapping,this.generateMipmaps=!1,this.threeCompatibilityTransforms=!1}setCastShadow(t,e){this.image.data[t*o+57]=e?0:1}getCastShadow(t){const e=this.image.data;return!Boolean(e[t*o+57])}setMatte(t,e){this.image.data[t*o+56]=e?1:0}getMatte(t){const e=this.image.data;return Boolean(e[t*o+56])}updateFrom(t,e){function n(t,e,n=-1){if(e in t&&t[e]){const n=i.getTextureHash(t[e]);return m[n]}return n}function r(t,e,n){return e in t?t[e]:n}function o(t,e,n,a){let r;if(r=u?function(t){return t.map||t.specularMap||t.displacementMap||t.normalMap||t.bumpMap||t.roughnessMap||t.metalnessMap||t.alphaMap||t.emissiveMap||t.clearcoatMap||t.clearcoatNormalMap||t.clearcoatRoughnessMap||t.iridescenceMap||t.iridescenceThicknessMap||t.specularIntensityMap||t.specularColorMap||t.transmissionMap||t.thicknessMap||t.sheenColorMap||t.sheenRoughnessMap||null}(t):t[e]&&t[e].isTexture?t[e]:null,r){const t=r.matrix.elements;let e=0;n[a+e++]=t[0],n[a+e++]=t[3],n[a+e++]=t[6],e++,n[a+e++]=t[1],n[a+e++]=t[4],n[a+e++]=t[7],e++}return 8}let s=0;const l=45*t.length,c=Math.ceil(Math.sqrt(l)),{threeCompatibilityTransforms:u,image:h}=this,f=i.reduceTexturesToUniqueSources(e),m={};for(let t=0,e=f.length;t<e;t++)m[i.getTextureHash(f[t])]=t;h.width!==c&&(this.dispose(),h.data=new Float32Array(c*c*4),h.width=c,h.height=c);const d=h.data;for(let e=0,i=t.length;e<i;e++){const i=t[e];d[s++]=i.color.r,d[s++]=i.color.g,d[s++]=i.color.b,d[s++]=n(i,"map"),d[s++]=r(i,"metalness",0),d[s++]=n(i,"metalnessMap"),d[s++]=r(i,"roughness",0),d[s++]=n(i,"roughnessMap"),d[s++]=r(i,"ior",1.5),d[s++]=r(i,"transmission",0),d[s++]=n(i,"transmissionMap"),d[s++]=r(i,"emissiveIntensity",0),"emissive"in i?(d[s++]=i.emissive.r,d[s++]=i.emissive.g,d[s++]=i.emissive.b):(d[s++]=0,d[s++]=0,d[s++]=0),d[s++]=n(i,"emissiveMap"),d[s++]=n(i,"normalMap"),"normalScale"in i?(d[s++]=i.normalScale.x,d[s++]=i.normalScale.y):(d[s++]=1,d[s++]=1),d[s++]=r(i,"clearcoat",0),d[s++]=n(i,"clearcoatMap"),d[s++]=r(i,"clearcoatRoughness",0),d[s++]=n(i,"clearcoatRoughnessMap"),d[s++]=n(i,"clearcoatNormalMap"),"clearcoatNormalScale"in i?(d[s++]=i.clearcoatNormalScale.x,d[s++]=i.clearcoatNormalScale.y):(d[s++]=1,d[s++]=1),s++,s++,"sheenColor"in i?(d[s++]=i.sheenColor.r,d[s++]=i.sheenColor.g,d[s++]=i.sheenColor.b):(d[s++]=0,d[s++]=0,d[s++]=0),d[s++]=n(i,"sheenColorMap"),d[s++]=r(i,"sheenRoughness",0),d[s++]=n(i,"sheenRoughnessMap"),d[s++]=n(i,"iridescenceMap"),d[s++]=n(i,"iridescenceThicknessMap"),d[s++]=r(i,"iridescence",0),d[s++]=r(i,"iridescenceIOR",1.3);const l=r(i,"iridescenceThicknessRange",[100,400]);d[s++]=l[0],d[s++]=l[1],"specularColor"in i?(d[s++]=i.specularColor.r,d[s++]=i.specularColor.g,d[s++]=i.specularColor.b):(d[s++]=1,d[s++]=1,d[s++]=1),d[s++]=n(i,"specularColorMap"),d[s++]=r(i,"specularIntensity",1),d[s++]=n(i,"specularIntensityMap");const c=0===r(i,"thickness",0)&&r(i,"attenuationDistance",1/0)===1/0;if(d[s++]=Number(c),s++,"attenuationColor"in i?(d[s++]=i.attenuationColor.r,d[s++]=i.attenuationColor.g,d[s++]=i.attenuationColor.b):(d[s++]=1,d[s++]=1,d[s++]=1),d[s++]=r(i,"attenuationDistance",1/0),d[s++]=n(i,"alphaMap"),d[s++]=i.opacity,d[s++]=i.alphaTest,!c&&i.transmission>0)d[s++]=0;else switch(i.side){case a.FrontSide:d[s++]=1;break;case a.BackSide:d[s++]=-1;break;case a.DoubleSide:d[s++]=0}s++,s++,d[s++]=Number(i.vertexColors)|Number(i.flatShading)<<1,d[s++]=Number(i.transparent),s+=o(i,"map",d,s),s+=o(i,"metalnessMap",d,s),s+=o(i,"roughnessMap",d,s),s+=o(i,"transmissionMap",d,s),s+=o(i,"emissiveMap",d,s),s+=o(i,"normalMap",d,s),s+=o(i,"clearcoatMap",d,s),s+=o(i,"clearcoatNormalMap",d,s),s+=o(i,"clearcoatRoughnessMap",d,s),s+=o(i,"sheenColorMap",d,s),s+=o(i,"sheenRoughnessMap",d,s),s+=o(i,"iridescenceMap",d,s),s+=o(i,"iridescenceThicknessMap",d,s),s+=o(i,"specularColorMap",d,s),s+=o(i,"specularIntensityMap",d,s)}this.needsUpdate=!0}}})),r.register("kOapr",(function(e,n){function a(t){return`${t.source.uuid}:${t.encoding}`}function r(t){const e=new Set,n=[];for(let r=0,i=t.length;r<i;r++){const i=t[r],o=a(i);e.has(o)||(e.add(o),n.push(i))}return n}t(e.exports,"getTextureHash",(()=>a)),t(e.exports,"reduceTexturesToUniqueSources",(()=>r))})),r.register("12pjC",(function(e,n){t(e.exports,"RenderTarget2DArray",(()=>l));var a=r("ilwiq"),i=r("RPVlj"),o=r("kOapr");const s=new a.Color;class l extends a.WebGLArrayRenderTarget{constructor(...t){super(...t);const e=this.texture;e.format=a.RGBAFormat,e.type=a.UnsignedByteType,e.minFilter=a.LinearFilter,e.magFilter=a.LinearFilter,e.wrapS=a.RepeatWrapping,e.wrapT=a.RepeatWrapping,e.setTextures=(...t)=>{this.setTextures(...t)};const n=new i.FullScreenQuad(new a.MeshBasicMaterial);this.fsQuad=n}setTextures(t,e,n,r){const i=o.reduceTexturesToUniqueSources(r),l=t.getRenderTarget(),c=t.toneMapping,u=t.getClearAlpha();t.getClearColor(s);const h=i.length||1;this.setSize(e,n,h),t.setClearColor(0,0),t.toneMapping=a.NoToneMapping;const f=this.fsQuad;for(let e=0,n=h;e<n;e++){const n=i[e];n&&(n.matrixAutoUpdate=!1,n.matrix.identity(),f.material.map=n,f.material.transparent=!0,t.setRenderTarget(this,e),f.render(t),n.updateMatrix(),n.matrixAutoUpdate=!0)}f.material.map=null,t.setClearColor(s,u),t.setRenderTarget(l),t.toneMapping=c}dispose(){super.dispose(),this.fsQuad.dispose()}}})),r.register("fcAdp",(function(e,n){t(e.exports,"shaderMaterialSampling",(()=>s));var a=r("bmrjs"),i=r("bQHTv"),o=r("6wwLz");const s=`\n\nstruct SurfaceRec {\n\tvec3 normal;\n\tvec3 faceNormal;\n\tbool frontFace;\n\tfloat roughness;\n\tfloat filteredRoughness;\n\tfloat metalness;\n\tvec3 color;\n\tvec3 emission;\n\tfloat transmission;\n\tbool thinFilm;\n\tfloat ior;\n\tfloat eta;\n\tfloat f0;\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n\tfloat filteredClearcoatRoughness;\n\tvec3 sheenColor;\n\tfloat sheenRoughness;\n\tfloat iridescence;\n\tfloat iridescenceIor;\n\tfloat iridescenceThickness;\n\tvec3 specularColor;\n\tfloat specularIntensity;\n\tvec3 attenuationColor;\n\tfloat attenuationDistance;\n};\n\nstruct SampleRec {\n\tfloat specularPdf;\n\tfloat pdf;\n\tvec3 direction;\n\tvec3 clearcoatDirection;\n\tvec3 color;\n};\n\n${a.shaderGGXFunctions}\n${i.shaderSheenFunctions}\n${o.shaderIridescenceFunctions}\n\nfloat disneyFresnel( SurfaceRec surf, vec3 wo, vec3 wi, vec3 wh ) {\n\n\tfloat dotHV = dot( wo, wh );\n\tfloat dotHL = dot( wi, wh );\n\n\t// TODO: some model-viewer test models look better when surf.eta is set to a non 1.5 eta here here?\n\t// and the furnace test seems to pass when it === 1.0\n\t// float dielectricFresnel = dielectricFresnel( abs( dotHV ), surf.eta );\n\tfloat dielectricFresnel = dielectricFresnel( abs( dotHV ), 1.0 / 1.1 );\n\tfloat metallicFresnel = schlickFresnel( dotHL, surf.f0 );\n\n\treturn mix( dielectricFresnel, metallicFresnel, surf.metalness );\n\n}\n\n// diffuse\nfloat diffuseEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf, out vec3 color ) {\n\n\t// https://schuttejoe.github.io/post/disneybsdf/\n\tfloat fl = schlickFresnel( wi.z, 0.0 );\n\tfloat fv = schlickFresnel( wo.z, 0.0 );\n\n\tfloat metalFactor = ( 1.0 - surf.metalness );\n\tfloat transFactor = ( 1.0 - surf.transmission );\n\tfloat rr = 0.5 + 2.0 * surf.roughness * fl * fl;\n\tfloat retro = rr * ( fl + fv + fl * fv * ( rr - 1.0f ) );\n\tfloat lambert = ( 1.0f - 0.5f * fl ) * ( 1.0f - 0.5f * fv );\n\n\t// TODO: subsurface approx?\n\n\tfloat FM = disneyFresnel( surf, wo, wi, wh );\n\n\tcolor = ( 1.0 - FM ) * transFactor * metalFactor * wi.z * surf.color * ( retro + lambert ) / PI;\n\treturn wi.z / PI;\n\n}\n\nvec3 diffuseDirection( vec3 wo, SurfaceRec surf ) {\n\n\tvec3 lightDirection = sampleSphere( sobol2( 11 ) );\n\tlightDirection.z += 1.0;\n\tlightDirection = normalize( lightDirection );\n\n\treturn lightDirection;\n\n}\n\n// specular\nfloat specularEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf, out vec3 color ) {\n\n\t// if roughness is set to 0 then D === NaN which results in black pixels\n\tfloat metalness = surf.metalness;\n\tfloat filteredRoughness = surf.filteredRoughness;\n\n\tfloat eta = surf.eta;\n\tfloat f0 = surf.f0;\n\tfloat G = ggxShadowMaskG2( wi, wo, filteredRoughness );\n\tfloat D = ggxDistribution( wh, filteredRoughness );\n\tfloat FM = disneyFresnel( surf, wo, wi, wh );\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tbool cannotRefract = eta * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\tFM = 1.0;\n\n\t}\n\n\tvec3 metalColor = surf.color;\n\tvec3 dielectricColor = f0 * surf.specularColor;\n\tvec3 specColor = mix( dielectricColor, metalColor, surf.metalness );\n\n\tvec3 iridescenceF = evalIridescence( 1.0, surf.iridescenceIor, dot( wi, wh ), surf.iridescenceThickness, vec3( f0 ) );\n\tvec3 iridescenceMix = mix( vec3( FM ), iridescenceF, surf.iridescence );\n\tvec3 F = mix( specColor, vec3( 1.0 ), iridescenceMix );\n\n\tcolor = mix( surf.specularIntensity, 1.0, surf.metalness ) * wi.z * F * G * D / ( 4.0 * abs( wi.z * wo.z ) );\n\n\t// PDF\n\t// See 14.1.1 Microfacet BxDFs in https://www.pbr-book.org/\n\tfloat incidentTheta = acos( wo.z );\n\tfloat G1 = ggxShadowMaskG1( incidentTheta, filteredRoughness );\n\tfloat ggxPdf = D * G1 * max( 0.0, abs( dot( wo, wh ) ) ) / abs ( wo.z );\n\treturn ggxPdf / ( 4.0 * dot( wo, wh ) );\n\n}\n\nvec3 specularDirection( vec3 wo, SurfaceRec surf ) {\n\n\t// sample ggx vndf distribution which gives a new normal\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tvec2( filteredRoughness ),\n\t\tsobol2( 12 )\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\treturn - reflect( wo, halfVector );\n\n}\n\n\n// transmission\n/*\nfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf, out vec3 color ) {\n\n\t// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tfloat eta = surf.eta;\n\tbool frontFace = surf.frontFace;\n\tbool thinFilm = surf.thinFilm;\n\n\tvec3 col = thinFilm || frontFace ? surf.color : vec3( 1.0 );\n\tcolor = surf.transmission * col;\n\n\tfloat denom = pow( eta * dot( wi, wh ) + dot( wo, wh ), 2.0 );\n\treturn ggxPDF( wo, wh, filteredRoughness ) / denom;\n\n}\n\nvec3 transmissionDirection( vec3 wo, SurfaceRec surf ) {\n\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tfloat eta = surf.eta;\n\tbool frontFace = surf.frontFace;\n\n\t// sample ggx vndf distribution which gives a new normal\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tvec2( filteredRoughness ),\n\t\tsobol2( 13 )\n\t);\n\n\n\t// TODO: support thin film\n\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\n\treturn normalize( lightDirection );\n\n}\n*/\n\n// TODO: This is just using a basic cosine-weighted specular distribution with an\n// incorrect PDF value at the moment. Update it to correctly use a GGX distribution\nfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf, out vec3 color ) {\n\n\t// only attenuate the color if it's on the way in\n\tvec3 col = surf.thinFilm || surf.frontFace ? surf.color : vec3( 1.0 );\n\tcolor = surf.transmission * col;\n\n\t// PDF\n\tfloat eta = surf.eta;\n\tfloat f0 = surf.f0;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnel( cosTheta, f0 );\n\tbool cannotRefract = eta * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 1.0 - reflectance );\n\n}\n\nvec3 transmissionDirection( vec3 wo, SurfaceRec surf ) {\n\n\tfloat roughness = surf.roughness;\n\tfloat eta = surf.eta;\n\tvec3 halfVector = normalize( vec3( 0.0, 0.0, 1.0 ) + sampleSphere( sobol2( 13 ) ) * roughness );\n\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\n\n\tif ( surf.thinFilm ) {\n\n\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );\n\n\t}\n\treturn normalize( lightDirection );\n\n}\n\n// clearcoat\nfloat clearcoatEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf, inout vec3 color ) {\n\n\tfloat ior = 1.5;\n\tfloat f0 = iorRatioToF0( ior );\n\tbool frontFace = surf.frontFace;\n\tfloat filteredClearcoatRoughness = surf.filteredClearcoatRoughness;\n\n\tfloat eta = frontFace ? 1.0 / ior : ior;\n\tfloat G = ggxShadowMaskG2( wi, wo, filteredClearcoatRoughness );\n\tfloat D = ggxDistribution( wh, filteredClearcoatRoughness );\n\tfloat F = schlickFresnel( dot( wi, wh ), f0 );\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tbool cannotRefract = eta * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\tF = 1.0;\n\n\t}\n\n\tfloat fClearcoat = F * D * G / ( 4.0 * abs( wi.z * wo.z ) );\n\tcolor = color * ( 1.0 - surf.clearcoat * F ) + fClearcoat * surf.clearcoat * wi.z;\n\n\t// PDF\n\t// See equation (27) in http://jcgt.org/published/0003/02/03/\n\treturn ggxPDF( wo, wh, filteredClearcoatRoughness ) / ( 4.0 * dot( wi, wh ) );\n\n}\n\nvec3 clearcoatDirection( vec3 wo, SurfaceRec surf ) {\n\n\t// sample ggx vndf distribution which gives a new normal\n\tfloat filteredClearcoatRoughness = surf.filteredClearcoatRoughness;\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tvec2( filteredClearcoatRoughness ),\n\t\tsobol2( 14 )\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\treturn - reflect( wo, halfVector );\n\n}\n\n// sheen\nvec3 sheenColor( vec3 wo, vec3 wi, vec3 wh, SurfaceRec surf ) {\n\n\tfloat cosThetaO = saturateCos( wo.z );\n\tfloat cosThetaI = saturateCos( wi.z );\n\tfloat cosThetaH = wh.z;\n\n\tfloat D = velvetD( cosThetaH, surf.sheenRoughness );\n\tfloat G = velvetG( cosThetaO, cosThetaI, surf.sheenRoughness );\n\n\t// See equation (1) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\n\tvec3 color = surf.sheenColor;\n\tcolor *= D * G / ( 4.0 * abs( cosThetaO * cosThetaI ) );\n\tcolor *= wi.z;\n\n\treturn color;\n\n}\n\n// bsdf\nvoid getLobeWeights(\n\tvec3 wo, vec3 wi, vec3 wh, vec3 clearcoatWo, SurfaceRec surf,\n\tout float diffuseWeight, out float specularWeight, out float transmissionWeight, out float clearcoatWeight\n) {\n\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\n\tfloat eta = surf.eta;\n\tfloat f0 = surf.f0;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\n\t// TODO: does "cannot refract" belong in disney fresnel?\n\tfloat reflectance = disneyFresnel( surf, wo, wi, wh );\n\tbool cannotRefract = eta * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tfloat transSpecularProb = mix( max( 0.25, reflectance ), 1.0, metalness );\n\tfloat diffSpecularProb = 0.5 + 0.5 * metalness;\n\n\tdiffuseWeight = ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb );\n\tspecularWeight = transmission * transSpecularProb + ( 1.0 - transmission ) * diffSpecularProb;\n\ttransmissionWeight = transmission * ( 1.0 - transSpecularProb );\n\tclearcoatWeight = surf.clearcoat * schlickFresnel( clearcoatWo.z, 0.04 );\n\n\tfloat totalWeight = diffuseWeight + specularWeight + transmissionWeight + clearcoatWeight;\n\tdiffuseWeight /= totalWeight;\n\tspecularWeight /= totalWeight;\n\ttransmissionWeight /= totalWeight;\n\tclearcoatWeight /= totalWeight;\n}\n\nfloat bsdfEval(\n\tvec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRec surf,\n\tfloat diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight, out float specularPdf, out vec3 color\n) {\n\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\n\tfloat eta = surf.eta;\n\tfloat f0 = surf.f0;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnel( cosTheta, f0 );\n\tbool cannotRefract = eta * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tfloat spdf = 0.0;\n\tfloat dpdf = 0.0;\n\tfloat tpdf = 0.0;\n\tfloat cpdf = 0.0;\n\tcolor = vec3( 0.0 );\n\n\tvec3 halfVector = getHalfVector( wi, wo, surf.eta );\n\n\t// diffuse\n\tif ( diffuseWeight > 0.0 && wi.z > 0.0 ) {\n\n\t\tdpdf = diffuseEval( wo, wi, halfVector, surf, color );\n\t\tcolor *= 1.0 - surf.transmission;\n\n\t}\n\n\t// ggx specular\n\tif ( specularWeight > 0.0 && wi.z > 0.0 ) {\n\n\t\tvec3 outColor;\n\t\tspdf = specularEval( wo, wi, getHalfVector( wi, wo ), surf, outColor );\n\t\tcolor += outColor;\n\n\t}\n\n\t// transmission\n\tif ( transmissionWeight > 0.0 && wi.z < 0.0 ) {\n\n\t\ttpdf = transmissionEval( wo, wi, halfVector, surf, color );\n\n\t}\n\n\t// sheen\n\tcolor *= sheenAlbedoScaling( wo, wi, surf );\n\tcolor += sheenColor( wo, wi, halfVector, surf );\n\n\t// clearcoat\n\tif ( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {\n\n\t\tvec3 clearcoatHalfVector = getHalfVector( clearcoatWo, clearcoatWi );\n\t\tcpdf = clearcoatEval( clearcoatWo, clearcoatWi, clearcoatHalfVector, surf, color );\n\n\t}\n\n\tfloat pdf =\n\t\t  dpdf * diffuseWeight\n\t\t+ spdf * specularWeight\n\t\t+ tpdf * transmissionWeight\n\t\t+ cpdf * clearcoatWeight;\n\n\t// retrieve specular rays for the shadows flag\n\tspecularPdf = spdf * specularWeight + cpdf * clearcoatWeight;\n\n\treturn pdf;\n\n}\n\nfloat bsdfResult( vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRec surf, out vec3 color ) {\n\n\tvec3 wh = getHalfVector( wo, wi, surf.eta );\n\tfloat diffuseWeight;\n\tfloat specularWeight;\n\tfloat transmissionWeight;\n\tfloat clearcoatWeight;\n\tgetLobeWeights( wo, wi, wh, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\tfloat specularPdf;\n\treturn bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, specularPdf, color );\n\n}\n\nSampleRec bsdfSample( vec3 wo, vec3 clearcoatWo, mat3 normalBasis, mat3 invBasis, mat3 clearcoatNormalBasis, mat3 clearcoatInvBasis, SurfaceRec surf ) {\n\n\tfloat diffuseWeight;\n\tfloat specularWeight;\n\tfloat transmissionWeight;\n\tfloat clearcoatWeight;\n\t// using normal and basically-reflected ray since we don't have proper half vector here\n\tgetLobeWeights( wo, wo, vec3( 0, 0, 1 ), clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\n\n\tfloat pdf[4];\n\tpdf[0] = diffuseWeight;\n\tpdf[1] = specularWeight;\n\tpdf[2] = transmissionWeight;\n\tpdf[3] = clearcoatWeight;\n\n\tfloat cdf[4];\n\tcdf[0] = pdf[0];\n\tcdf[1] = pdf[1] + cdf[0];\n\tcdf[2] = pdf[2] + cdf[1];\n\tcdf[3] = pdf[3] + cdf[2];\n\n\tif( cdf[3] != 0.0 ) {\n\n\t\tfloat invMaxCdf = 1.0 / cdf[3];\n\t\tcdf[0] *= invMaxCdf;\n\t\tcdf[1] *= invMaxCdf;\n\t\tcdf[2] *= invMaxCdf;\n\t\tcdf[3] *= invMaxCdf;\n\n\t} else {\n\n\t\tcdf[0] = 1.0;\n\t\tcdf[1] = 0.0;\n\t\tcdf[2] = 0.0;\n\t\tcdf[3] = 0.0;\n\n\t}\n\n\tvec3 wi;\n\tvec3 clearcoatWi;\n\n\tfloat r = sobol( 15 );\n\tif ( r <= cdf[0] ) { // diffuse\n\n\t\twi = diffuseDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[1] ) { // specular\n\n\t\twi = specularDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[2] ) { // transmission / refraction\n\n\t\twi = transmissionDirection( wo, surf );\n\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\n\n\t} else if ( r <= cdf[3] ) { // clearcoat\n\n\t\tclearcoatWi = clearcoatDirection( clearcoatWo, surf );\n\t\twi = normalize( invBasis * normalize( clearcoatNormalBasis * clearcoatWi ) );\n\n\t}\n\n\tSampleRec result;\n\tresult.pdf = bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, result.specularPdf, result.color );\n\tresult.direction = wi;\n\tresult.clearcoatDirection = clearcoatWi;\n\n\treturn result;\n\n}\n`})),r.register("bmrjs",(function(e,n){t(e.exports,"shaderGGXFunctions",(()=>a));const a="\n// The GGX functions provide sampling and distribution information for normals as output so\n// in order to get probability of scatter direction the half vector must be computed and provided.\n// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n// [2] http://jcgt.org/published/0007/04/01/\n// [4] http://jcgt.org/published/0003/02/03/\n\n// trowbridge-reitz === GGX === GTR\n\nvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t// function below, as well\n\n\t// Implementation from reference [1]\n\t// stretch view\n\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t// orthonormal basis\n\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\tvec3 T2 = cross( T1, V );\n\n\t// sample point with polar coordinates (r, phi)\n\tfloat a = 1.0 / ( 1.0 + V.z );\n\tfloat r = sqrt( uv.x );\n\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\tfloat P1 = r * cos( phi );\n\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t// compute normal\n\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t// unstretch\n\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\treturn N;\n\n}\n\n// Below are PDF and related functions for use in a Monte Carlo path tracer\n// as specified in Appendix B of the following paper\n// See equation (34) from reference [0]\nfloat ggxLamda( float theta, float roughness ) {\n\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = tanTheta * tanTheta;\n\tfloat alpha2 = roughness * roughness;\n\n\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\treturn numerator / 2.0;\n\n}\n\n// See equation (34) from reference [0]\nfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n}\n\n// See equation (125) from reference [4]\nfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat scatterTheta = acos( wo.z );\n\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n}\n\n// See equation (33) from reference [0]\nfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\tfloat a2 = roughness * roughness;\n\ta2 = max( EPSILON, a2 );\n\tfloat cosTheta = halfVector.z;\n\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\tif ( cosTheta == 0.0 ) return 0.0;\n\n\tfloat theta = acosSafe( halfVector.z );\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\treturn ( a2 / denom );\n\n}\n\n// See equation (3) from reference [2]\nfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat D = ggxDistribution( halfVector, roughness );\n\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n}\n"})),r.register("bQHTv",(function(e,n){t(e.exports,"shaderSheenFunctions",(()=>a));const a="\n\n// See equation (2) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetD( float cosThetaH, float roughness ) {\n\n\tfloat alpha = max( roughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat invAlpha = 1.0 / alpha;\n\n\tfloat sqrCosThetaH = cosThetaH * cosThetaH;\n\tfloat sinThetaH = max( 1.0 - sqrCosThetaH, 0.001 );\n\n\treturn ( 2.0 + invAlpha ) * pow( sinThetaH, 0.5 * invAlpha ) / ( 2.0 * PI );\n\n}\n\nfloat velvetParamsInterpolate( int i, float oneMinusAlphaSquared ) {\n\n\tconst float p0[5] = float[5]( 25.3245, 3.32435, 0.16801, -1.27393, -4.85967 );\n\tconst float p1[5] = float[5]( 21.5473, 3.82987, 0.19823, -1.97760, -4.32054 );\n\n\treturn mix( p1[i], p0[i], oneMinusAlphaSquared );\n\n}\n\nfloat velvetL( float x, float alpha ) {\n\n\tfloat oneMinusAlpha = 1.0 - alpha;\n\tfloat oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha;\n\n\tfloat a = velvetParamsInterpolate( 0, oneMinusAlphaSquared );\n\tfloat b = velvetParamsInterpolate( 1, oneMinusAlphaSquared );\n\tfloat c = velvetParamsInterpolate( 2, oneMinusAlphaSquared );\n\tfloat d = velvetParamsInterpolate( 3, oneMinusAlphaSquared );\n\tfloat e = velvetParamsInterpolate( 4, oneMinusAlphaSquared );\n\n\treturn a / ( 1.0 + b * pow( abs( x ), c ) ) + d * x + e;\n\n}\n\n// See equation (3) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetLambda( float cosTheta, float alpha ) {\n\n\treturn abs( cosTheta ) < 0.5 ? exp( velvetL( cosTheta, alpha ) ) : exp( 2.0 * velvetL( 0.5, alpha ) - velvetL( 1.0 - cosTheta, alpha ) );\n\n}\n\n// See Section 3, Shadowing Term, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat velvetG( float cosThetaO, float cosThetaI, float roughness ) {\n\n\tfloat alpha = max( roughness, 0.07 );\n\talpha = alpha * alpha;\n\n\treturn 1.0 / ( 1.0 + velvetLambda( cosThetaO, alpha ) + velvetLambda( cosThetaI, alpha ) );\n\n}\n\nfloat directionalAlbedoSheen( float cosTheta, float alpha ) {\n\n\tcosTheta = saturate( cosTheta );\n\n\tfloat c = 1.0 - cosTheta;\n\tfloat c3 = c * c * c;\n\n\treturn 0.65584461 * c3 + 1.0 / ( 4.16526551 + exp( -7.97291361 * sqrt( alpha ) + 6.33516894 ) );\n\n}\n\nfloat sheenAlbedoScaling( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\tfloat eWi = directionalAlbedoSheen( saturateCos( wi.z ), alpha );\n\n\treturn min( 1.0 - maxSheenColor * eWo, 1.0 - maxSheenColor * eWi );\n\n}\n\n// See Section 5, Layering, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat sheenAlbedoScaling( vec3 wo, SurfaceRec surf ) {\n\n\tfloat alpha = max( surf.sheenRoughness, 0.07 );\n\talpha = alpha * alpha;\n\n\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\n\n\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\n\n\treturn 1.0 - maxSheenColor * eWo;\n\n}\n\n"})),r.register("6wwLz",(function(e,n){t(e.exports,"shaderIridescenceFunctions",(()=>a));const a="\n\n// XYZ to sRGB color space\nconst mat3 XYZ_TO_REC709 = mat3(\n\t 3.2404542, -0.9692660,  0.0556434,\n\t-1.5371385,  1.8760108, -0.2040259,\n\t-0.4985314,  0.0415560,  1.0572252\n);\n\nvec3 fresnel0ToIor( vec3 fresnel0 ) {\n\n\tvec3 sqrtF0 = sqrt( fresnel0 );\n\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\n}\n\n// Conversion FO/IOR\nvec3 iorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\n\treturn square( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\n}\n\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\nfloat iorToFresnel0( float transmittedIor, float incidentIor ) {\n\n\treturn square( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ) );\n\n}\n\n// Fresnel equations for dielectric/dielectric interfaces. See https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\nvec3 evalSensitivity( float OPD, vec3 shift ) {\n\n\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\n\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\n\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - square( phase ) * var );\n\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * square( phase ) );\n\txyz /= 1.0685e-7;\n\n\tvec3 srgb = XYZ_TO_REC709 * xyz;\n\treturn srgb;\n\n}\n\n// See Section 4. Analytic Spectral Integration, A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence, https://hal.archives-ouvertes.fr/hal-01518344/document\nvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\n\tvec3 I;\n\n\t// Force iridescenceIor -> outsideIOR when thinFilmThickness -> 0.0\n\tfloat iridescenceIor = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\n\t// Evaluate the cosTheta on the base layer (Snell law)\n\tfloat sinTheta2Sq = square( outsideIOR / iridescenceIor ) * ( 1.0 - square( cosTheta1 ) );\n\n\t// Handle TIR:\n\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\tif ( cosTheta2Sq < 0.0 ) {\n\n\t\treturn vec3( 1.0 );\n\n\t}\n\n\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\n\t// First interface\n\tfloat R0 = iorToFresnel0( iridescenceIor, outsideIOR );\n\tfloat R12 = schlickFresnel( cosTheta1, R0 );\n\tfloat R21 = R12;\n\tfloat T121 = 1.0 - R12;\n\tfloat phi12 = 0.0;\n\tif ( iridescenceIor < outsideIOR ) {\n\n\t\tphi12 = PI;\n\n\t}\n\tfloat phi21 = PI - phi12;\n\n\t// Second interface\n\tvec3 baseIOR = fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\n\tvec3 R1 = iorToFresnel0( baseIOR, iridescenceIor );\n\tvec3 R23 = schlickFresnel( cosTheta2, R1 );\n\tvec3 phi23 = vec3( 0.0 );\n\tif ( baseIOR[0] < iridescenceIor ) {\n\n\t\tphi23[ 0 ] = PI;\n\n\t}\n\tif ( baseIOR[1] < iridescenceIor ) {\n\n\t\tphi23[ 1 ] = PI;\n\n\t}\n\tif ( baseIOR[2] < iridescenceIor ) {\n\n\t\tphi23[ 2 ] = PI;\n\n\t}\n\n\t// Phase shift\n\tfloat OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\n\tvec3 phi = vec3( phi21 ) + phi23;\n\n\t// Compound terms\n\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\tvec3 r123 = sqrt( R123 );\n\tvec3 Rs = square( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\n\t// Reflectance term for m = 0 (DC term amplitude)\n\tvec3 C0 = R12 + Rs;\n\tI = C0;\n\n\t// Reflectance term for m > 0 (pairs of diracs)\n\tvec3 Cm = Rs - T121;\n\tfor ( int m = 1; m <= 2; ++ m )\n\t{\n\t\tCm *= r123;\n\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\tI += Cm * Sm;\n\t}\n\n\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\n\treturn max( I, vec3( 0.0 ) );\n}\n\n"})),r.register("1RTaa",(function(e,n){t(e.exports,"shaderEnvMapSampling",(()=>a));const a="\n\nvec3 sampleEquirectEnvMapColor( vec3 direction, sampler2D map ) {\n\n\treturn texture2D( map, equirectDirectionToUv( direction ) ).rgb;\n\n}\n\nfloat envMapDirectionPdf( vec3 direction ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tfloat theta = uv.y * PI;\n\tfloat sinTheta = sin( theta );\n\tif ( sinTheta == 0.0 ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 2.0 * PI * PI * sinTheta );\n\n}\n\nfloat sampleEnvMap( EquirectHdrInfo info, vec3 direction, out vec3 color ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\tfloat lum = luminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\nfloat sampleEnvMapProbability( EquirectHdrInfo info, vec2 r, out vec3 color, out vec3 direction ) {\n\n\t// sample env map cdf\n\tfloat v = texture2D( info.marginalWeights, vec2( r.x, 0.0 ) ).x;\n\tfloat u = texture2D( info.conditionalWeights, vec2( r.y, v ) ).x;\n\tvec2 uv = vec2( u, v );\n\n\tvec3 derivedDirection = equirectUvToDirection( uv );\n\tdirection = derivedDirection;\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = info.totalSumWhole + info.totalSumDecimal;\n\tfloat lum = luminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\n"})),r.register("22srR",(function(e,n){t(e.exports,"shaderLightSampling",(()=>a));const a="\n\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n}\n\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t// page 32, equation 26: E[window1]\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), EPSILON );\n\n\tif ( cutoffDistance > 0.0 ) {\n\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t}\n\n\treturn distanceFalloff;\n\n}\n\nfloat getPhotometricAttenuation( sampler2DArray iesProfiles, int iesProfile, vec3 posToLight, vec3 lightDir, vec3 u, vec3 v ) {\n\n    float cosTheta = dot( posToLight, lightDir );\n    float angle = acos( cosTheta ) * ( 1.0 / PI );\n\n    return texture2D( iesProfiles, vec3( 0.0, angle, iesProfile ) ).r;\n\n}\n\nstruct LightSampleRec {\n\n\tbool hit;\n\tfloat dist;\n\tvec3 direction;\n\tfloat pdf;\n\tvec3 emission;\n\tint type;\n\n};\n\nLightSampleRec lightsClosestHit( sampler2D lights, uint lightCount, vec3 rayOrigin, vec3 rayDirection ) {\n\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = false;\n\n\tuint l;\n\tfor ( l = 0u; l < lightCount; l ++ ) {\n\n\t\tLight light = readLightInfo( lights, l );\n\n\t\tvec3 u = light.u;\n\t\tvec3 v = light.v;\n\n\t\t// check for backface\n\t\tvec3 normal = normalize( cross( u, v ) );\n\t\tif ( dot( normal, rayDirection ) < 0.0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tu *= 1.0 / dot( u, u );\n\t\tv *= 1.0 / dot( v, v );\n\n\t\tfloat dist;\n\n\t\t// MIS / light intersection is not supported for punctual lights.\n\t\tif(\n\t\t\t( light.type == RECT_AREA_LIGHT_TYPE && intersectsRectangle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) ) ||\n\t\t\t( light.type == CIRC_AREA_LIGHT_TYPE && intersectsCircle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) )\n\t\t) {\n\n\t\t\tif ( dist < lightSampleRec.dist || ! lightSampleRec.hit ) {\n\n\t\t\t\tfloat cosTheta = dot( rayDirection, normal );\n\n\t\t\t\tlightSampleRec.hit = true;\n\t\t\t\tlightSampleRec.dist = dist;\n\t\t\t\tlightSampleRec.pdf = ( dist * dist ) / ( light.area * cosTheta );\n\t\t\t\tlightSampleRec.emission = light.color * light.intensity;\n\t\t\t\tlightSampleRec.direction = rayDirection;\n\t\t\t\tlightSampleRec.type = light.type;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomAreaLightSample( Light light, vec3 rayOrigin, vec2 ruv ) {\n\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = true;\n\tlightSampleRec.type = light.type;\n\n\tlightSampleRec.emission = light.color * light.intensity;\n\n\tvec3 randomPos;\n\tif( light.type == RECT_AREA_LIGHT_TYPE ) {\n\n\t\t// rectangular area light\n\t\trandomPos = light.position + light.u * ( ruv.x - 0.5 ) + light.v * ( ruv.y - 0.5 );\n\n\t} else if( light.type == CIRC_AREA_LIGHT_TYPE ) {\n\n\t\t// circular area light\n\t\tfloat r = 0.5 * sqrt( ruv.x );\n\t\tfloat theta = ruv.y * 2.0 * PI;\n\t\tfloat x = r * cos( theta );\n\t\tfloat y = r * sin( theta );\n\n\t\trandomPos = light.position + light.u * x + light.v * y;\n\n\t}\n\n\tvec3 toLight = randomPos - rayOrigin;\n\tfloat lightDistSq = dot( toLight, toLight );\n\tlightSampleRec.dist = sqrt( lightDistSq );\n\n\tvec3 direction = toLight / lightSampleRec.dist;\n\tlightSampleRec.direction = direction;\n\n\tvec3 lightNormal = normalize( cross( light.u, light.v ) );\n\tlightSampleRec.pdf = lightDistSq / ( light.area * dot( direction, lightNormal ) );\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomSpotLightSample( Light light, sampler2DArray iesProfiles, vec3 rayOrigin, vec2 ruv ) {\n\n\tfloat radius = light.radius * sqrt( ruv.x );\n\tfloat theta = ruv.y * 2.0 * PI;\n\tfloat x = radius * cos( theta );\n\tfloat y = radius * sin( theta );\n\n\tvec3 u = light.u;\n\tvec3 v = light.v;\n\tvec3 normal = normalize( cross( u, v ) );\n\n\tfloat angle = acos( light.coneCos );\n\tfloat angleTan = tan( angle );\n\tfloat startDistance = light.radius / max( angleTan, EPSILON );\n\n\tvec3 randomPos = light.position - normal * startDistance + u * x + v * y;\n\tvec3 toLight = randomPos - rayOrigin;\n\tfloat lightDistSq = dot( toLight, toLight );\n\tfloat dist = sqrt( lightDistSq );\n\n\tvec3 direction = toLight / max( dist, EPSILON );\n\tfloat cosTheta = dot( direction, normal );\n\n\tfloat spotAttenuation = light.iesProfile != - 1 ?\n\t\tgetPhotometricAttenuation( iesProfiles, light.iesProfile, direction, normal, u, v ) :\n\t\tgetSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );\n\n\tfloat distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );\n\tLightSampleRec lightSampleRec;\n\tlightSampleRec.hit = true;\n\tlightSampleRec.type = light.type;\n\tlightSampleRec.dist = dist;\n\tlightSampleRec.direction = direction;\n\tlightSampleRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;\n\tlightSampleRec.pdf = 1.0;\n\n\treturn lightSampleRec;\n\n}\n\nLightSampleRec randomLightSample( sampler2D lights, sampler2DArray iesProfiles, uint lightCount, vec3 rayOrigin, vec3 ruv ) {\n\n\t// pick a random light\n\tuint l = uint( ruv.x * float( lightCount ) );\n\tLight light = readLightInfo( lights, l );\n\n\tif ( light.type == SPOT_LIGHT_TYPE ) {\n\n\t\treturn randomSpotLightSample( light, iesProfiles, rayOrigin, ruv.yz );\n\n\t} else if ( light.type == POINT_LIGHT_TYPE ) {\n\n\t\tvec3 lightRay = light.u - rayOrigin;\n\t\tfloat lightDist = length( lightRay );\n\t\tfloat cutoffDistance = light.distance;\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDist, light.decay ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDist / cutoffDistance ) ) );\n\n\t\t}\n\n\t\tLightSampleRec rec;\n\t\trec.hit = true;\n\t\trec.direction = normalize( lightRay );\n\t\trec.dist = length( lightRay );\n\t\trec.pdf = 1.0;\n\t\trec.emission = light.color * light.intensity * distanceFalloff;\n\t\trec.type = light.type;\n\t\treturn rec;\n\n\t} else if ( light.type == DIR_LIGHT_TYPE ) {\n\n\t\tLightSampleRec rec;\n\t\trec.hit = true;\n\t\trec.dist = 1e10;\n\t\trec.direction = light.u;\n\t\trec.pdf = 1.0;\n\t\trec.emission = light.color * light.intensity;\n\t\trec.type = light.type;\n\n\t\treturn rec;\n\n\t} else {\n\n\t\t// sample the light\n\t\treturn randomAreaLightSample( light, rayOrigin, ruv.yz );\n\n\t}\n\n}\n\n"})),r.register("9XfmY",(function(e,n){t(e.exports,"shaderLayerTexelFetchFunctions",(()=>a));const a="\n\n\t// add texel fetch functions for texture arrays\n\tvec4 texelFetch1D( sampler2DArray tex, int layer, uint index ) {\n\n\t\tuint width = uint( textureSize( tex, 0 ).x );\n\t\tuvec2 uv;\n\t\tuv.x = index % width;\n\t\tuv.y = index / width;\n\n\t\treturn texelFetch( tex, ivec3( uv, layer ), 0 );\n\n\t}\n\n\tvec4 textureSampleBarycoord( sampler2DArray tex, int layer, vec3 barycoord, uvec3 faceIndices ) {\n\n\t\treturn\n\t\t\tbarycoord.x * texelFetch1D( tex, layer, faceIndices.x ) +\n\t\t\tbarycoord.y * texelFetch1D( tex, layer, faceIndices.y ) +\n\t\t\tbarycoord.z * texelFetch1D( tex, layer, faceIndices.z );\n\n\t}\n\n"})),r.register("iyhQ7",(function(e,n){t(e.exports,"PhysicalCameraUniform",(()=>i));var a=r("kLfIo");class i{constructor(){this.bokehSize=0,this.apertureBlades=0,this.apertureRotation=0,this.focusDistance=10,this.anamorphicRatio=1}updateFrom(t){t instanceof a.PhysicalCamera?(this.bokehSize=t.bokehSize,this.apertureBlades=t.apertureBlades,this.apertureRotation=t.apertureRotation,this.focusDistance=t.focusDistance,this.anamorphicRatio=t.anamorphicRatio):(this.bokehSize=0,this.apertureRotation=0,this.apertureBlades=0,this.focusDistance=10,this.anamorphicRatio=1)}}})),r.register("kAJM1",(function(e,n){t(e.exports,"EquirectHdrInfoUniform",(()=>s));var a=r("ilwiq");function i(t,e,n=0,a=t.length){let r=0,i=a-1;for(;r<i;){const a=~~(.5*i+.5*r);t[n+a]<e?r=a+1:i=a}return r}function o(t,e,n){return.2126*t+.7152*e+.0722*n}class s{constructor(){const t=new a.DataTexture;t.type=a.FloatType,t.format=a.RedFormat,t.minFilter=a.LinearFilter,t.magFilter=a.LinearFilter,t.generateMipmaps=!1;const e=new a.DataTexture;e.type=a.FloatType,e.format=a.RedFormat,e.minFilter=a.LinearFilter,e.magFilter=a.LinearFilter,e.generateMipmaps=!1,this.marginalWeights=t,this.conditionalWeights=e,this.map=null,this.totalSumWhole=0,this.totalSumDecimal=0}dispose(){this.marginalWeights.dispose(),this.conditionalWeights.dispose(),this.map&&this.map.dispose()}updateFrom(t){const e=function(t){const e=t.clone();e.source=new a.Source({...e.image});const{width:n,height:r,data:i}=e.image;let o=i;if(e.type===a.HalfFloatType){o=new Float32Array(i.length);for(const t in i)o[t]=a.DataUtils.fromHalfFloat(i[t]);e.image.data=o,e.type=a.FloatType}if(e.flipY){const t=o;o=o.slice();for(let e=0;e<r;e++)for(let a=0;a<n;a++){const i=4*(e*n+a),s=4*((r-e-1)*n+a);o[s+0]=t[i+0],o[s+1]=t[i+1],o[s+2]=t[i+2],o[s+3]=t[i+3]}e.flipY=!1,e.image.data=o}return e}(t);e.wrapS=a.RepeatWrapping,e.wrapT=a.RepeatWrapping;const{width:n,height:r,data:s}=e.image,l=new Float32Array(n*r),c=new Float32Array(n*r),u=new Float32Array(r),h=new Float32Array(r);let f=0,m=0;for(let t=0;t<r;t++){let e=0;for(let a=0;a<n;a++){const r=t*n+a,i=o(s[4*r+0],s[4*r+1],s[4*r+2]);e+=i,f+=i,l[r]=i,c[r]=e}if(0!==e)for(let a=t*n,r=t*n+n;a<r;a++)l[a]/=e,c[a]/=e;m+=e,u[t]=e,h[t]=m}if(0!==m)for(let t=0,e=u.length;t<e;t++)u[t]/=m,h[t]/=m;const d=new Float32Array(r),p=new Float32Array(n*r);for(let t=0;t<r;t++){const e=i(h,(t+1)/r);d[t]=(e+.5)/r}for(let t=0;t<r;t++)for(let e=0;e<n;e++){const a=t*n+e,r=i(c,(e+1)/n,t*n,n);p[a]=(r+.5)/n}this.dispose();const{marginalWeights:g,conditionalWeights:v}=this;g.image={width:r,height:1,data:d},g.needsUpdate=!0,v.image={width:n,height:r,data:p},v.needsUpdate=!0;const x=~~f,b=f-x;this.totalSumWhole=x,this.totalSumDecimal=b,this.map=e}}})),r.register("TWVPU",(function(e,n){t(e.exports,"LightsInfoUniformStruct",(()=>i));var a=r("ilwiq");class i{constructor(){const t=new a.DataTexture(new Float32Array(4),1,1);t.format=a.RGBAFormat,t.type=a.FloatType,t.wrapS=a.ClampToEdgeWrapping,t.wrapT=a.ClampToEdgeWrapping,t.generateMipmaps=!1,this.tex=t,this.count=0}updateFrom(t,e=[]){const n=this.tex,r=Math.max(6*t.length,1),i=Math.ceil(Math.sqrt(r));n.image.width!==i&&(n.dispose(),n.image.data=new Float32Array(i*i*4),n.image.width=i,n.image.height=i);const o=n.image.data,s=new a.Vector3,l=new a.Vector3,c=new a.Matrix4,u=new a.Quaternion,h=new a.Vector3,f=new a.Vector3,m=new a.Vector3;for(let n=0,a=t.length;n<a;n++){const a=t[n],r=6*n*4;let i=0;a.getWorldPosition(l),o[r+i++]=l.x,o[r+i++]=l.y,o[r+i++]=l.z;let d=0;if(a.isRectAreaLight&&a.isCircular?d=1:a.isSpotLight?d=2:a.isDirectionalLight?d=3:a.isPointLight&&(d=4),o[r+i++]=d,o[r+i++]=a.color.r,o[r+i++]=a.color.g,o[r+i++]=a.color.b,o[r+i++]=a.intensity,a.getWorldQuaternion(u),a.isRectAreaLight)s.set(a.width,0,0).applyQuaternion(u),o[r+i++]=s.x,o[r+i++]=s.y,o[r+i++]=s.z,i++,l.set(0,a.height,0).applyQuaternion(u),o[r+i++]=l.x,o[r+i++]=l.y,o[r+i++]=l.z,o[r+i++]=s.cross(l).length()*(a.isCircular?Math.PI/4:1);else if(a.isSpotLight){const t=a.radius;h.setFromMatrixPosition(a.matrixWorld),f.setFromMatrixPosition(a.target.matrixWorld),c.lookAt(h,f,m),u.setFromRotationMatrix(c),s.set(1,0,0).applyQuaternion(u),o[r+i++]=s.x,o[r+i++]=s.y,o[r+i++]=s.z,i++,l.set(0,1,0).applyQuaternion(u),o[r+i++]=l.x,o[r+i++]=l.y,o[r+i++]=l.z,o[r+i++]=Math.PI*t*t,o[r+i++]=t,o[r+i++]=a.shadow.camera.near,o[r+i++]=a.decay,o[r+i++]=a.distance,o[r+i++]=Math.cos(a.angle),o[r+i++]=Math.cos(a.angle*(1-a.penumbra)),o[r+i++]=e.indexOf(a.iesTexture)}else if(a.isPointLight){const t=a.getWorldPosition(s);o[r+i++]=t.x,o[r+i++]=t.y,o[r+i++]=t.z,i++,i+=4,i+=2,o[r+i++]=a.decay,o[r+i++]=a.distance}else if(a.isDirectionalLight){const t=a.getWorldPosition(s),e=a.target.getWorldPosition(l);f.subVectors(t,e).normalize(),o[r+i++]=f.x,o[r+i++]=f.y,o[r+i++]=f.z}}n.needsUpdate=!0,this.count=t.length}}})),r.register("8nCwU",(function(e,n){t(e.exports,"IESProfilesTexture",(()=>l));var a=r("ilwiq"),i=r("RPVlj"),o=r("77Fts");const s=new a.Color;class l extends a.WebGLArrayRenderTarget{constructor(...t){super(...t);const e=this.texture;e.format=a.RGBAFormat,e.type=a.FloatType,e.minFilter=a.LinearFilter,e.magFilter=a.LinearFilter,e.wrapS=a.ClampToEdgeWrapping,e.wrapT=a.ClampToEdgeWrapping,e.generateMipmaps=!1,e.updateFrom=(...t)=>{this.updateFrom(...t)};const n=new i.FullScreenQuad(new a.MeshBasicMaterial);this.fsQuad=n,this.iesLoader=new o.IESLoader}async updateFrom(t,e){const n=t.getRenderTarget(),r=t.toneMapping,i=t.getClearAlpha();t.getClearColor(s);const o=e.length||1;this.setSize(360,180,o),t.setClearColor(0,0),t.toneMapping=a.NoToneMapping;const l=this.fsQuad;for(let n=0,a=o;n<a;n++){const a=e[n];a&&(a.matrixAutoUpdate=!1,a.matrix.identity(),l.material.map=a,l.material.transparent=!0,t.setRenderTarget(this,n),l.render(t),a.updateMatrix(),a.matrixAutoUpdate=!0)}l.material.map=null,t.setClearColor(s,i),t.setRenderTarget(n),t.toneMapping=r,l.dispose()}dispose(){super.dispose(),this.fsQuad.dispose()}}})),r.register("6Q19u",(function(e,n){t(e.exports,"AttributesTextureArray",(()=>i));var a=r("7Ie7O");class i extends a.FloatAttributeTextureArray{updateNormalAttribute(t){this.updateAttribute(0,t)}updateTangentAttribute(t){this.updateAttribute(1,t)}updateUvAttribute(t){this.updateAttribute(2,t)}updateColorAttribute(t){this.updateAttribute(3,t)}updateFrom(t,e,n,a){this.setAttributes([t,e,n,a])}}})),r.register("7Ie7O",(function(e,n){t(e.exports,"FloatAttributeTextureArray",(()=>s));var a=r("ilwiq"),i=r("8Zfx2");function o(t,e,n,a,r){if(e>a)throw new Error;const i=t.length/e,o=8*t.constructor.BYTES_PER_ELEMENT;let s=1;switch(t.constructor){case Uint8Array:case Uint16Array:case Uint32Array:s=2**o-1;break;case Int8Array:case Int16Array:case Int32Array:s=2**(o-1)-1}for(let o=0;o<i;o++){const i=4*o,l=e*o;for(let o=0;o<a;o++)n[r+i+o]=e>=o+1?t[l+o]/s:0}}class s extends a.DataArrayTexture{constructor(){super(),this._textures=[],this.type=a.FloatType,this.format=a.RGBAFormat,this.internalFormat="RGBA32F"}updateAttribute(t,e){const n=this._textures[t];n.updateFrom(e);const a=n.image,r=this.image;if(a.width!==r.width||a.height!==r.height)throw new Error("FloatAttributeTextureArray: Attribute must be the same dimensions when updating single layer.");const{width:i,height:s,data:l}=r,c=i*s*4*t;let u=e.itemSize;3===u&&(u=4),o(n.image.data,u,l,4,c),this.dispose(),this.needsUpdate=!0}setAttributes(t){const e=t[0].count,n=t.length;for(let a=0,r=n;a<r;a++)if(t[a].count!==e)throw new Error("FloatAttributeTextureArray: All attributes must have the same item count.");const a=this._textures;for(;a.length<n;){const t=new i.FloatVertexAttributeTexture;a.push(t)}for(;a.length>n;)a.pop();for(let e=0,r=n;e<r;e++)a[e].updateFrom(t[e]);const r=a[0].image,s=this.image;r.width===s.width&&r.height===s.height&&r.depth===n||(s.width=r.width,s.height=r.height,s.depth=n,s.data=new Float32Array(s.width*s.height*s.depth*4));const{data:l,width:c,height:u}=s;for(let e=0,r=n;e<r;e++){const n=a[e],r=c*u*4*e;let i=t[e].itemSize;3===i&&(i=4),o(n.image.data,i,l,4,r)}this.dispose(),this.needsUpdate=!0}}}));
//# sourceMappingURL=areaLight.5162c8c6.js.map
