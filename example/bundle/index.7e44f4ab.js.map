{"mappings":"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","sources":["example/index.js","node_modules/three/examples/jsm/loaders/LDrawLoader.js","node_modules/three/examples/jsm/utils/LDrawUtils.js","node_modules/three/examples/jsm/libs/stats.module.js"],"sourcesContent":["import {\n\tACESFilmicToneMapping,\n\tNoToneMapping,\n\tBox3,\n\tLoadingManager,\n\tSphere,\n\tDoubleSide,\n\tMesh,\n\tMeshStandardMaterial,\n\tPlaneGeometry,\n\tGroup,\n\tMeshPhysicalMaterial,\n\tWebGLRenderer,\n\tScene,\n\tPerspectiveCamera,\n\tOrthographicCamera,\n\tMeshBasicMaterial,\n\tsRGBEncoding,\n\tCustomBlending,\n} from 'three';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { LDrawLoader } from 'three/examples/jsm/loaders/LDrawLoader.js';\nimport { LDrawUtils } from 'three/examples/jsm/utils/LDrawUtils.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\nimport { generateRadialFloorTexture } from './utils/generateRadialFloorTexture.js';\nimport { PathTracingSceneWorker } from '../src/workers/PathTracingSceneWorker.js';\nimport { PhysicalPathTracingMaterial, PathTracingRenderer, MaterialReducer, BlurredEnvMapGenerator, GradientEquirectTexture } from '../src/index.js';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst envMaps = {\n\t'Royal Esplanade': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/royal_esplanade_1k.hdr',\n\t'Moonless Golf': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/moonless_golf_1k.hdr',\n\t'Overpass': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/pedestrian_overpass_1k.hdr',\n\t'Venice Sunset': 'https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/equirectangular/venice_sunset_1k.hdr',\n\t'Small Studio': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/studio_small_05_1k.hdr',\n\t'Pfalzer Forest': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/phalzer_forest_01_1k.hdr',\n\t'Leadenhall Market': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/leadenhall_market_1k.hdr',\n\t'Kloppenheim': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/kloppenheim_05_1k.hdr',\n\t'Hilly Terrain': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/hilly_terrain_01_1k.hdr',\n\t'Circus Arena': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/circus_arena_1k.hdr',\n\t'Chinese Garden': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/chinese_garden_1k.hdr',\n\t'Autoshop': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/autoshop_01_1k.hdr',\n\n\t'Measuring Lab': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/vintage_measuring_lab_2k.hdr',\n\t'Whale Skeleton': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/whale_skeleton_2k.hdr',\n\t'Hall of Mammals': 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/master/hdri/hall_of_mammals_2k.hdr',\n};\n\nconst models = window.MODEL_LIST || {};\n\nlet initialModel = Object.keys( models )[ 0 ];\nif ( window.location.hash ) {\n\n\tconst modelName = window.location.hash.substring( 1 ).replaceAll( '%20', ' ' );\n\tif ( modelName in models ) {\n\n\t\tinitialModel = modelName;\n\n\t}\n\n}\n\nconst params = {\n\n\tmultipleImportanceSampling: true,\n\tacesToneMapping: true,\n\tresolutionScale: 1 / window.devicePixelRatio,\n\ttilesX: 2,\n\ttilesY: 2,\n\tsamplesPerFrame: 1,\n\n\tmodel: initialModel,\n\n\tenvMap: envMaps[ 'Royal Esplanade' ],\n\n\tgradientTop: '#bfd8ff',\n\tgradientBottom: '#ffffff',\n\n\tenvironmentIntensity: 1.0,\n\tenvironmentBlur: 0.0,\n\tenvironmentRotation: 0,\n\n\tcameraProjection: 'Perspective',\n\n\tbackgroundType: 'Gradient',\n\tbgGradientTop: '#111111',\n\tbgGradientBottom: '#000000',\n\tbackgroundAlpha: 1.0,\n\tcheckerboardTransparency: true,\n\n\tenable: true,\n\tbounces: 3,\n\tfilterGlossyFactor: 0.5,\n\tpause: false,\n\n\tfloorColor: '#080808',\n\tfloorOpacity: 1.0,\n\tfloorRoughness: 0.1,\n\tfloorMetalness: 0.0\n\n};\n\nlet creditEl, loadingEl, samplesEl;\nlet floorPlane, gui, stats, sceneInfo;\nlet renderer, orthoCamera, perspectiveCamera, activeCamera;\nlet ptRenderer, fsQuad, controls, scene;\nlet envMap, envMapGenerator, backgroundMap;\nlet loadingModel = false;\nlet delaySamples = 0;\n\nconst orthoWidth = 2;\n\ninit();\n\nasync function init() {\n\n\tcreditEl = document.getElementById( 'credits' );\n\tloadingEl = document.getElementById( 'loading' );\n\tsamplesEl = document.getElementById( 'samples' );\n\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.outputEncoding = sRGBEncoding;\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\tdocument.body.appendChild( renderer.domElement );\n\n\tscene = new Scene();\n\n\tconst aspect = window.innerWidth / window.innerHeight;\n\tperspectiveCamera = new PerspectiveCamera( 60, aspect, 0.025, 500 );\n\tperspectiveCamera.position.set( - 1, 0.25, 1 );\n\n\tconst orthoHeight = orthoWidth / aspect;\n\torthoCamera = new OrthographicCamera( orthoWidth / - 2, orthoWidth / 2, orthoHeight / 2, orthoHeight / - 2, 0, 100 );\n\torthoCamera.position.set( - 1, 0.25, 1 );\n\n\tbackgroundMap = new GradientEquirectTexture();\n\tbackgroundMap.topColor.set( params.bgGradientTop );\n\tbackgroundMap.bottomColor.set( params.bgGradientBottom );\n\tbackgroundMap.update();\n\n\tptRenderer = new PathTracingRenderer( renderer );\n\tptRenderer.alpha = true;\n\tptRenderer.material = new PhysicalPathTracingMaterial();\n\tptRenderer.tiles.set( params.tiles, params.tiles );\n\tptRenderer.material.setDefine( 'FEATURE_MIS', Number( params.multipleImportanceSampling ) );\n\tptRenderer.material.backgroundMap = backgroundMap;\n\n\tfsQuad = new FullScreenQuad( new MeshBasicMaterial( {\n\t\tmap: ptRenderer.target.texture,\n\t\tblending: CustomBlending,\n\t\tpremultipliedAlpha: renderer.getContextAttributes().premultipliedAlpha,\n\t} ) );\n\n\tcontrols = new OrbitControls( perspectiveCamera, renderer.domElement );\n\tcontrols.addEventListener( 'change', resetRenderer );\n\n\tenvMapGenerator = new BlurredEnvMapGenerator( renderer );\n\n\tconst floorTex = generateRadialFloorTexture( 2048 );\n\tfloorPlane = new Mesh(\n\t\tnew PlaneGeometry(),\n\t\tnew MeshStandardMaterial( {\n\t\t\tmap: floorTex,\n\t\t\ttransparent: true,\n\t\t\tcolor: 0x080808,\n\t\t\troughness: 0.1,\n\t\t\tmetalness: 0.0,\n\t\t\tside: DoubleSide,\n\t\t} )\n\t);\n\tfloorPlane.scale.setScalar( 3 );\n\tfloorPlane.rotation.x = - Math.PI / 2;\n\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\trenderer.physicallyCorrectLights = true;\n\trenderer.toneMapping = ACESFilmicToneMapping;\n\tscene.background = backgroundMap;\n\tptRenderer.tiles.set( params.tilesX, params.tilesY );\n\n\tupdateCamera( params.cameraProjection );\n\tupdateModel();\n\tupdateEnvMap();\n\tonResize();\n\n\tanimate();\n\n\twindow.addEventListener( 'resize', onResize );\n\n}\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\tstats.update();\n\n\tif ( loadingModel ) {\n\n\t\treturn;\n\n\t}\n\n\tfloorPlane.material.color.set( params.floorColor );\n\tfloorPlane.material.roughness = params.floorRoughness;\n\tfloorPlane.material.metalness = params.floorMetalness;\n\tfloorPlane.material.opacity = params.floorOpacity;\n\n\tif ( ptRenderer.samples < 1.0 || ! params.enable ) {\n\n\t\trenderer.render( scene, activeCamera );\n\n\t}\n\n\tif ( params.enable && delaySamples === 0 ) {\n\n\t\tconst samples = Math.floor( ptRenderer.samples );\n\t\tsamplesEl.innerText = `samples: ${ samples }`;\n\n\t\tptRenderer.material.materials.updateFrom( sceneInfo.materials, sceneInfo.textures );\n\t\tptRenderer.material.filterGlossyFactor = params.filterGlossyFactor;\n\t\tptRenderer.material.environmentIntensity = params.environmentIntensity;\n\t\tptRenderer.material.bounces = params.bounces;\n\t\tptRenderer.material.physicalCamera.updateFrom( activeCamera );\n\n\t\tactiveCamera.updateMatrixWorld();\n\n\t\tif ( ! params.pause || ptRenderer.samples < 1 ) {\n\n\t\t\tfor ( let i = 0, l = params.samplesPerFrame; i < l; i ++ ) {\n\n\t\t\t\tptRenderer.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderer.autoClear = false;\n\t\tfsQuad.render( renderer );\n\t\trenderer.autoClear = true;\n\n\t} else if ( delaySamples > 0 ) {\n\n\t\tdelaySamples --;\n\n\t}\n\n\tsamplesEl.innerText = `Samples: ${ Math.floor( ptRenderer.samples ) }`;\n\n}\n\nfunction resetRenderer() {\n\n\tif ( params.tilesX * params.tilesY !== 1.0 ) {\n\n\t\tdelaySamples = 1;\n\n\t}\n\n\tptRenderer.reset();\n\n}\n\nfunction onResize() {\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst scale = params.resolutionScale;\n\tconst dpr = window.devicePixelRatio;\n\n\tptRenderer.setSize( w * scale * dpr, h * scale * dpr );\n\tptRenderer.reset();\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio * scale );\n\n\tconst aspect = w / h;\n\tperspectiveCamera.aspect = aspect;\n\tperspectiveCamera.updateProjectionMatrix();\n\n\tconst orthoHeight = orthoWidth / aspect;\n\torthoCamera.top = orthoHeight / 2;\n\torthoCamera.bottom = orthoHeight / - 2;\n\torthoCamera.updateProjectionMatrix();\n\n}\n\nfunction buildGui() {\n\n\tif ( gui ) {\n\n\t\tgui.destroy();\n\n\t}\n\n\tgui = new GUI();\n\n\tgui.add( params, 'model', Object.keys( models ) ).onChange( updateModel );\n\n\tconst pathTracingFolder = gui.addFolder( 'path tracing' );\n\tpathTracingFolder.add( params, 'enable' );\n\tpathTracingFolder.add( params, 'pause' );\n\tpathTracingFolder.add( params, 'multipleImportanceSampling' ).onChange( v => {\n\n\t\tptRenderer.material.setDefine( 'FEATURE_MIS', Number( v ) );\n\t\tptRenderer.reset();\n\n\t} );\n\tpathTracingFolder.add( params, 'acesToneMapping' ).onChange( v => {\n\n\t\trenderer.toneMapping = v ? ACESFilmicToneMapping : NoToneMapping;\n\n\t} );\n\tpathTracingFolder.add( params, 'bounces', 1, 20, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tpathTracingFolder.add( params, 'filterGlossyFactor', 0, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\n\tconst resolutionFolder = gui.addFolder( 'resolution' );\n\tresolutionFolder.add( params, 'resolutionScale', 0.1, 1.0, 0.01 ).onChange( () => {\n\n\t\tonResize();\n\n\t} );\n\tresolutionFolder.add( params, 'samplesPerFrame', 1, 10, 1 );\n\tresolutionFolder.add( params, 'tilesX', 1, 10, 1 ).onChange( v => {\n\n\t\tptRenderer.tiles.x = v;\n\n\t} );\n\tresolutionFolder.add( params, 'tilesY', 1, 10, 1 ).onChange( v => {\n\n\t\tptRenderer.tiles.y = v;\n\n\t} );\n\tresolutionFolder.add( params, 'cameraProjection', [ 'Perspective', 'Orthographic' ] ).onChange( v => {\n\n\t\tupdateCamera( v );\n\n\t} );\n\tresolutionFolder.open();\n\n\tconst environmentFolder = gui.addFolder( 'environment' );\n\tenvironmentFolder.add( params, 'envMap', envMaps ).name( 'map' ).onChange( updateEnvMap );\n\tenvironmentFolder.add( params, 'environmentBlur', 0.0, 1.0 ).onChange( () => {\n\n\t\tupdateEnvBlur();\n\t\tptRenderer.reset();\n\n\t} ).name( 'env map blur' );\n\tenvironmentFolder.add( params, 'environmentIntensity', 0.0, 10.0 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} ).name( 'intensity' );\n\tenvironmentFolder.add( params, 'environmentRotation', 0, 2 * Math.PI ).onChange( v => {\n\n\t\tptRenderer.material.environmentRotation.makeRotationY( v );\n\t\tptRenderer.reset();\n\n\t} );\n\tenvironmentFolder.open();\n\n\tconst backgroundFolder = gui.addFolder( 'background' );\n\tbackgroundFolder.add( params, 'backgroundType', [ 'Environment', 'Gradient' ] ).onChange( v => {\n\n\t\tif ( v === 'Gradient' ) {\n\n\t\t\tscene.background = backgroundMap;\n\t\t\tptRenderer.material.backgroundMap = backgroundMap;\n\n\t\t} else {\n\n\t\t\tscene.background = scene.environment;\n\t\t\tptRenderer.material.backgroundMap = null;\n\n\t\t}\n\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.addColor( params, 'bgGradientTop' ).onChange( v => {\n\n\t\tbackgroundMap.topColor.set( v );\n\t\tbackgroundMap.update();\n\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.addColor( params, 'bgGradientBottom' ).onChange( v => {\n\n\t\tbackgroundMap.bottomColor.set( v );\n\t\tbackgroundMap.update();\n\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.add( params, 'backgroundAlpha', 0, 1 ).onChange( v => {\n\n\t\tptRenderer.material.backgroundAlpha = v;\n\t\tptRenderer.reset();\n\n\t} );\n\tbackgroundFolder.add( params, 'checkerboardTransparency' ).onChange( v => {\n\n\t\tif ( v ) document.body.classList.add( 'checkerboard' );\n\t\telse document.body.classList.remove( 'checkerboard' );\n\n\t} );\n\n\tconst floorFolder = gui.addFolder( 'floor' );\n\tfloorFolder.addColor( params, 'floorColor' ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorRoughness', 0, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorMetalness', 0, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.add( params, 'floorOpacity', 0, 1 ).onChange( () => {\n\n\t\tptRenderer.reset();\n\n\t} );\n\tfloorFolder.close();\n\n}\n\nfunction updateEnvMap() {\n\n\tnew RGBELoader()\n\t\t.load( params.envMap, texture => {\n\n\t\t\tif ( scene.environmentMap ) {\n\n\t\t\t\tscene.environment.dispose();\n\t\t\t\tenvMap.dispose();\n\n\t\t\t}\n\n\t\t\tenvMap = texture;\n\t\t\tupdateEnvBlur();\n\t\t\tptRenderer.reset();\n\n\t\t} );\n\n}\n\nfunction updateEnvBlur() {\n\n\tconst blurredEnvMap = envMapGenerator.generate( envMap, params.environmentBlur );\n\tptRenderer.material.envMapInfo.updateFrom( blurredEnvMap );\n\n\tscene.environment = blurredEnvMap;\n\tif ( params.backgroundType !== 'Gradient' ) {\n\n\t\tscene.background = blurredEnvMap;\n\n\t}\n\n}\n\nfunction updateCamera( cameraProjection ) {\n\n\tif ( cameraProjection === 'Perspective' ) {\n\n\t\tif ( activeCamera ) {\n\n\t\t\tperspectiveCamera.position.copy( activeCamera.position );\n\n\t\t}\n\n\t\tactiveCamera = perspectiveCamera;\n\n\t} else {\n\n\t\tif ( activeCamera ) {\n\n\t\t\torthoCamera.position.copy( activeCamera.position );\n\n\t\t}\n\n\t\tactiveCamera = orthoCamera;\n\n\t}\n\n\tcontrols.object = activeCamera;\n\tptRenderer.camera = activeCamera;\n\n\tcontrols.update();\n\n\tresetRenderer();\n\n}\n\nfunction convertOpacityToTransmission( model ) {\n\n\tmodel.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tconst material = c.material;\n\t\t\tif ( material.opacity < 0.65 && material.opacity > 0.2 ) {\n\n\t\t\t\tconst newMaterial = new MeshPhysicalMaterial();\n\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\tif ( key in material ) {\n\n\t\t\t\t\t\tif ( material[ key ] === null ) {\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( material[ key ].isTexture ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ] = material[ key ];\n\n\t\t\t\t\t\t} else if ( material[ key ].copy && material[ key ].constructor === newMaterial[ key ].constructor ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ].copy( material[ key ] );\n\n\t\t\t\t\t\t} else if ( ( typeof material[ key ] ) === 'number' ) {\n\n\t\t\t\t\t\t\tnewMaterial[ key ] = material[ key ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tnewMaterial.opacity = 1.0;\n\t\t\t\tnewMaterial.transmission = 1.0;\n\t\t\t\tc.material = newMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n}\n\nasync function updateModel() {\n\n\tif ( gui ) {\n\n\t\tdocument.body.classList.remove( 'checkerboard' );\n\t\tgui.destroy();\n\t\tgui = null;\n\n\t}\n\n\tlet model;\n\tconst manager = new LoadingManager();\n\tconst modelInfo = models[ params.model ];\n\n\tloadingModel = true;\n\trenderer.domElement.style.visibility = 'hidden';\n\tsamplesEl.innerText = '--';\n\tcreditEl.innerText = '--';\n\tloadingEl.innerText = 'Loading';\n\tloadingEl.style.visibility = 'visible';\n\n\tscene.traverse( c => {\n\n\t\tif ( c.material ) {\n\n\t\t\tconst material = c.material;\n\t\t\tfor ( const key in material ) {\n\n\t\t\t\tif ( material[ key ] && material[ key ].isTexture ) {\n\n\t\t\t\t\tmaterial[ key ].dispose();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tif ( sceneInfo ) {\n\n\t\tscene.remove( sceneInfo.scene );\n\n\t}\n\n\n\tconst onFinish = async () => {\n\n\t\tif ( modelInfo.removeEmission ) {\n\n\t\t\tmodel.traverse( c => {\n\n\t\t\t\tif ( c.material ) {\n\n\t\t\t\t\tc.material.emissiveMap = null;\n\t\t\t\t\tc.material.emissiveIntensity = 0;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( modelInfo.opacityToTransmission ) {\n\n\t\t\tconvertOpacityToTransmission( model );\n\n\t\t}\n\n\t\tmodel.traverse( c => {\n\n\t\t\tif ( c.material ) {\n\n\t\t\t\t// set the thickness so we render the material as a volumetric object\n\t\t\t\tc.material.thickness = 1.0;\n\t\t\t\tc.material.side = DoubleSide;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tif ( modelInfo.postProcess ) {\n\n\t\t\tmodelInfo.postProcess( model );\n\n\t\t}\n\n\t\t// rotate model after so it doesn't affect the bounding sphere scale\n\t\tif ( modelInfo.rotation ) {\n\n\t\t\tmodel.rotation.set( ...modelInfo.rotation );\n\n\t\t}\n\n\t\t// center the model\n\t\tconst box = new Box3();\n\t\tbox.setFromObject( model );\n\t\tmodel.position\n\t\t\t.addScaledVector( box.min, - 0.5 )\n\t\t\t.addScaledVector( box.max, - 0.5 );\n\n\t\tconst sphere = new Sphere();\n\t\tbox.getBoundingSphere( sphere );\n\n\t\tmodel.scale.setScalar( 1 / sphere.radius );\n\t\tmodel.position.multiplyScalar( 1 / sphere.radius );\n\n\t\tbox.setFromObject( model );\n\n\t\tmodel.updateMatrixWorld();\n\n\t\tconst group = new Group();\n\t\tfloorPlane.position.y = box.min.y;\n\t\tgroup.add( model, floorPlane );\n\n\t\tconst reducer = new MaterialReducer();\n\t\treducer.process( group );\n\n\t\tconst generator = new PathTracingSceneWorker();\n\t\tconst result = await generator.generate( group, { onProgress: v => {\n\n\t\t\tconst percent = Math.floor( 100 * v );\n\t\t\tloadingEl.innerText = `Building BVH : ${ percent }%`;\n\n\t\t} } );\n\n\t\tsceneInfo = result;\n\t\tscene.add( sceneInfo.scene );\n\n\t\tconst { bvh, textures, materials } = result;\n\t\tconst geometry = bvh.geometry;\n\t\tconst material = ptRenderer.material;\n\n\t\tmaterial.bvh.updateFrom( bvh );\n\t\tmaterial.attributesArray.updateFrom(\n\t\t\tgeometry.attributes.normal,\n\t\t\tgeometry.attributes.tangent,\n\t\t\tgeometry.attributes.uv,\n\t\t\tgeometry.attributes.color,\n\t\t);\n\t\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\t\tmaterial.textures.setTextures( renderer, 2048, 2048, textures );\n\t\tmaterial.materials.updateFrom( materials, textures );\n\n\t\tgenerator.dispose();\n\n\t\tloadingEl.style.visibility = 'hidden';\n\n\t\tcreditEl.innerHTML = modelInfo.credit || '';\n\t\tcreditEl.style.visibility = modelInfo.credit ? 'visible' : 'hidden';\n\t\tparams.bounces = modelInfo.bounces || 3;\n\t\tparams.floorColor = modelInfo.floorColor || '#080808';\n\t\tparams.floorRoughness = modelInfo.floorRoughness || 1.0;\n\t\tparams.floorMetalness = modelInfo.floorMetalness || 0.0;\n\t\tparams.bgGradientTop = modelInfo.gradientTop || '#111111';\n\t\tparams.bgGradientBottom = modelInfo.gradientBot || '#000000';\n\n\t\tbackgroundMap.topColor.set( params.bgGradientTop );\n\t\tbackgroundMap.bottomColor.set( params.bgGradientBottom );\n\t\tbackgroundMap.update();\n\n\t\tbuildGui();\n\n\t\tloadingModel = false;\n\t\trenderer.domElement.style.visibility = 'visible';\n\t\tif ( params.checkerboardTransparency ) {\n\n\t\t\tdocument.body.classList.add( 'checkerboard' );\n\n\t\t}\n\n\t\tptRenderer.reset();\n\n\t};\n\n\tconst url = modelInfo.url;\n\tif ( /(gltf|glb)$/i.test( url ) ) {\n\n\t\tmanager.onLoad = onFinish;\n\t\tnew GLTFLoader( manager )\n\t\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t\t.load(\n\t\t\t\turl,\n\t\t\t\tgltf => {\n\n\t\t\t\t\tmodel = gltf.scene;\n\n\t\t\t\t},\n\t\t\t\tprogress => {\n\n\t\t\t\t\tif ( progress.total !== 0 && progress.total >= progress.loaded ) {\n\n\t\t\t\t\t\tconst percent = Math.floor( 100 * progress.loaded / progress.total );\n\t\t\t\t\t\tloadingEl.innerText = `Loading : ${ percent }%`;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t);\n\n\t} else if ( /mpd$/i.test( url ) ) {\n\n\t\tmanager.onProgress = ( url, loaded, total ) => {\n\n\t\t\tconst percent = Math.floor( 100 * loaded / total );\n\t\t\tloadingEl.innerText = `Loading : ${ percent }%`;\n\n\t\t};\n\n\t\tconst loader = new LDrawLoader( manager );\n\t\tawait loader.preloadMaterials( 'https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/colors/ldcfgalt.ldr' );\n\t\tloader\n\t\t\t.setPartsLibraryPath( 'https://raw.githubusercontent.com/gkjohnson/ldraw-parts-library/master/complete/ldraw/' )\n\t\t\t.load(\n\t\t\t\turl,\n\t\t\t\tresult => {\n\n\t\t\t\t\tmodel = LDrawUtils.mergeObject( result );\n\t\t\t\t\tmodel.rotation.set( Math.PI, 0, 0 );\n\t\t\t\t\tmodel.traverse( c => {\n\n\t\t\t\t\t\tif ( c.isLineSegments ) {\n\n\t\t\t\t\t\t\tc.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\t\t\tc.material.roughness *= 0.25;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\t\t\t\t\tonFinish();\n\n\t\t\t\t},\n\t\t\t);\n\n\t}\n\n}\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tFileLoader,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tMatrix4,\n\tMesh,\n\tMeshStandardMaterial,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector3,\n\tRay\n} from 'three';\n\n// Special surface finish tag types.\n// Note: \"MATERIAL\" tag (e.g. GLITTER, SPECKLE) is not implemented\nconst FINISH_TYPE_DEFAULT = 0;\nconst FINISH_TYPE_CHROME = 1;\nconst FINISH_TYPE_PEARLESCENT = 2;\nconst FINISH_TYPE_RUBBER = 3;\nconst FINISH_TYPE_MATTE_METALLIC = 4;\nconst FINISH_TYPE_METAL = 5;\n\n// State machine to search a subobject path.\n// The LDraw standard establishes these various possible subfolders.\nconst FILE_LOCATION_TRY_PARTS = 0;\nconst FILE_LOCATION_TRY_P = 1;\nconst FILE_LOCATION_TRY_MODELS = 2;\nconst FILE_LOCATION_AS_IS = 3;\nconst FILE_LOCATION_TRY_RELATIVE = 4;\nconst FILE_LOCATION_TRY_ABSOLUTE = 5;\nconst FILE_LOCATION_NOT_FOUND = 6;\n\nconst MAIN_COLOUR_CODE = '16';\nconst MAIN_EDGE_COLOUR_CODE = '24';\n\nconst _tempVec0 = new Vector3();\nconst _tempVec1 = new Vector3();\n\nclass LDrawConditionalLineMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tdiffuse: {\n\t\t\t\t\t\tvalue: new Color()\n\t\t\t\t\t},\n\t\t\t\t\topacity: {\n\t\t\t\t\t\tvalue: 1.0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tattribute vec3 control0;\n\t\t\t\tattribute vec3 control1;\n\t\t\t\tattribute vec3 direction;\n\t\t\t\tvarying float discardFlag;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <color_pars_vertex>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <color_vertex>\n\n\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\t// Transform the line segment ends and control points into camera clip space\n\t\t\t\t\tvec4 c0 = projectionMatrix * modelViewMatrix * vec4( control0, 1.0 );\n\t\t\t\t\tvec4 c1 = projectionMatrix * modelViewMatrix * vec4( control1, 1.0 );\n\t\t\t\t\tvec4 p0 = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tvec4 p1 = projectionMatrix * modelViewMatrix * vec4( position + direction, 1.0 );\n\n\t\t\t\t\tc0.xy /= c0.w;\n\t\t\t\t\tc1.xy /= c1.w;\n\t\t\t\t\tp0.xy /= p0.w;\n\t\t\t\t\tp1.xy /= p1.w;\n\n\t\t\t\t\t// Get the direction of the segment and an orthogonal vector\n\t\t\t\t\tvec2 dir = p1.xy - p0.xy;\n\t\t\t\t\tvec2 norm = vec2( -dir.y, dir.x );\n\n\t\t\t\t\t// Get control point directions from the line\n\t\t\t\t\tvec2 c0dir = c0.xy - p1.xy;\n\t\t\t\t\tvec2 c1dir = c1.xy - p1.xy;\n\n\t\t\t\t\t// If the vectors to the controls points are pointed in different directions away\n\t\t\t\t\t// from the line segment then the line should not be drawn.\n\t\t\t\t\tfloat d0 = dot( normalize( norm ), normalize( c0dir ) );\n\t\t\t\t\tfloat d1 = dot( normalize( norm ), normalize( c1dir ) );\n\t\t\t\t\tdiscardFlag = float( sign( d0 ) != sign( d1 ) );\n\n\t\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t\t#include <clipping_planes_vertex>\n\t\t\t\t\t#include <fog_vertex>\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\tuniform vec3 diffuse;\n\t\t\tuniform float opacity;\n\t\t\tvarying float discardFlag;\n\n\t\t\t#include <common>\n\t\t\t#include <color_pars_fragment>\n\t\t\t#include <fog_pars_fragment>\n\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t#include <clipping_planes_pars_fragment>\n\t\t\tvoid main() {\n\n\t\t\t\tif ( discardFlag > 0.5 ) discard;\n\n\t\t\t\t#include <clipping_planes_fragment>\n\t\t\t\tvec3 outgoingLight = vec3( 0.0 );\n\t\t\t\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t#include <color_fragment>\n\t\t\t\toutgoingLight = diffuseColor.rgb; // simple shader\n\t\t\t\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t#include <encodings_fragment>\n\t\t\t\t#include <fog_fragment>\n\t\t\t\t#include <premultiplied_alpha_fragment>\n\t\t\t}\n\t\t\t`,\n\n\t\t} );\n\n\t\tObject.defineProperties( this, {\n\n\t\t\topacity: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.opacity.value;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tthis.uniforms.opacity.value = value;\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcolor: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn this.uniforms.diffuse.value;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\t\tthis.isLDrawConditionalLineMaterial = true;\n\n\t}\n\n}\n\nclass ConditionalLineSegments extends LineSegments {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\t\tthis.isConditionalLine = true;\n\n\t}\n\n}\n\nfunction generateFaceNormals( faces ) {\n\n\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tconst face = faces[ i ];\n\t\tconst vertices = face.vertices;\n\t\tconst v0 = vertices[ 0 ];\n\t\tconst v1 = vertices[ 1 ];\n\t\tconst v2 = vertices[ 2 ];\n\n\t\t_tempVec0.subVectors( v1, v0 );\n\t\t_tempVec1.subVectors( v2, v1 );\n\t\tface.faceNormal = new Vector3()\n\t\t\t.crossVectors( _tempVec0, _tempVec1 )\n\t\t\t.normalize();\n\n\t}\n\n}\n\nconst _ray = new Ray();\nfunction smoothNormals( faces, lineSegments, checkSubSegments = false ) {\n\n\t// NOTE: 1e2 is pretty coarse but was chosen to quantize the resulting value because\n\t// it allows edges to be smoothed as expected (see minifig arms).\n\t// --\n\t// And the vector values are initialize multiplied by 1 + 1e-10 to account for floating\n\t// point errors on vertices along quantization boundaries. Ie after matrix multiplication\n\t// vertices that should be merged might be set to \"1.7\" and \"1.6999...\" meaning they won't\n\t// get merged. This added epsilon attempts to push these error values to the same quantized\n\t// value for the sake of hashing. See \"AT-ST mini\" dishes. See mrdoob/three#23169.\n\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\n\t\treturn `${ x },${ y },${ z }`;\n\n\t}\n\n\tfunction hashEdge( v0, v1 ) {\n\n\t\treturn `${ hashVertex( v0 ) }_${ hashVertex( v1 ) }`;\n\n\t}\n\n\t// converts the two vertices to a ray with a normalized direction and origin of 0, 0, 0 projected\n\t// onto the original line.\n\tfunction toNormalizedRay( v0, v1, targetRay ) {\n\n\t\ttargetRay.direction.subVectors( v1, v0 ).normalize();\n\n\t\tconst scalar = v0.dot( targetRay.direction );\n\t\ttargetRay.origin.copy( v0 ).addScaledVector( targetRay.direction, - scalar );\n\n\t\treturn targetRay;\n\n\t}\n\n\tfunction hashRay( ray ) {\n\n\t\treturn hashEdge( ray.origin, ray.direction );\n\n\t}\n\n\tconst hardEdges = new Set();\n\tconst hardEdgeRays = new Map();\n\tconst halfEdgeList = {};\n\tconst normals = [];\n\n\t// Save the list of hard edges by hash\n\tfor ( let i = 0, l = lineSegments.length; i < l; i ++ ) {\n\n\t\tconst ls = lineSegments[ i ];\n\t\tconst vertices = ls.vertices;\n\t\tconst v0 = vertices[ 0 ];\n\t\tconst v1 = vertices[ 1 ];\n\t\thardEdges.add( hashEdge( v0, v1 ) );\n\t\thardEdges.add( hashEdge( v1, v0 ) );\n\n\t\t// only generate the hard edge ray map if we're checking subsegments because it's more expensive to check\n\t\t// and requires more memory.\n\t\tif ( checkSubSegments ) {\n\n\t\t\t// add both ray directions to the map\n\t\t\tconst ray = toNormalizedRay( v0, v1, new Ray() );\n\t\t\tconst rh1 = hashRay( ray );\n\t\t\tif ( ! hardEdgeRays.has( rh1 ) ) {\n\n\t\t\t\ttoNormalizedRay( v1, v0, ray );\n\t\t\t\tconst rh2 = hashRay( ray );\n\n\t\t\t\tconst info = {\n\t\t\t\t\tray,\n\t\t\t\t\tdistances: [],\n\t\t\t\t};\n\n\t\t\t\thardEdgeRays.set( rh1, info );\n\t\t\t\thardEdgeRays.set( rh2, info );\n\n\t\t\t}\n\n\t\t\t// store both segments ends in min, max order in the distances array to check if a face edge is a\n\t\t\t// subsegment later.\n\t\t\tconst info = hardEdgeRays.get( rh1 );\n\t\t\tlet d0 = info.ray.direction.dot( v0 );\n\t\t\tlet d1 = info.ray.direction.dot( v1 );\n\t\t\tif ( d0 > d1 ) {\n\n\t\t\t\t[ d0, d1 ] = [ d1, d0 ];\n\n\t\t\t}\n\n\t\t\tinfo.distances.push( d0, d1 );\n\n\t\t}\n\n\t}\n\n\t// track the half edges associated with each triangle\n\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tconst tri = faces[ i ];\n\t\tconst vertices = tri.vertices;\n\t\tconst vertCount = vertices.length;\n\t\tfor ( let i2 = 0; i2 < vertCount; i2 ++ ) {\n\n\t\t\tconst index = i2;\n\t\t\tconst next = ( i2 + 1 ) % vertCount;\n\t\t\tconst v0 = vertices[ index ];\n\t\t\tconst v1 = vertices[ next ];\n\t\t\tconst hash = hashEdge( v0, v1 );\n\n\t\t\t// don't add the triangle if the edge is supposed to be hard\n\t\t\tif ( hardEdges.has( hash ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// if checking subsegments then check to see if this edge lies on a hard edge ray and whether its within any ray bounds\n\t\t\tif ( checkSubSegments ) {\n\n\t\t\t\ttoNormalizedRay( v0, v1, _ray );\n\n\t\t\t\tconst rayHash = hashRay( _ray );\n\t\t\t\tif ( hardEdgeRays.has( rayHash ) ) {\n\n\t\t\t\t\tconst info = hardEdgeRays.get( rayHash );\n\t\t\t\t\tconst { ray, distances } = info;\n\t\t\t\t\tlet d0 = ray.direction.dot( v0 );\n\t\t\t\t\tlet d1 = ray.direction.dot( v1 );\n\n\t\t\t\t\tif ( d0 > d1 ) {\n\n\t\t\t\t\t\t[ d0, d1 ] = [ d1, d0 ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// return early if the face edge is found to be a subsegment of a line edge meaning the edge will have \"hard\" normals\n\t\t\t\t\tlet found = false;\n\t\t\t\t\tfor ( let i = 0, l = distances.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\tif ( d0 >= distances[ i ] && d1 <= distances[ i + 1 ] ) {\n\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( found ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst info = {\n\t\t\t\tindex: index,\n\t\t\t\ttri: tri\n\t\t\t};\n\t\t\thalfEdgeList[ hash ] = info;\n\n\t\t}\n\n\t}\n\n\t// Iterate until we've tried to connect all faces to share normals\n\twhile ( true ) {\n\n\t\t// Stop if there are no more faces left\n\t\tlet halfEdge = null;\n\t\tfor ( const key in halfEdgeList ) {\n\n\t\t\thalfEdge = halfEdgeList[ key ];\n\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( halfEdge === null ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t\t// Exhaustively find all connected faces\n\t\tconst queue = [ halfEdge ];\n\t\twhile ( queue.length > 0 ) {\n\n\t\t\t// initialize all vertex normals in this triangle\n\t\t\tconst tri = queue.pop().tri;\n\t\t\tconst vertices = tri.vertices;\n\t\t\tconst vertNormals = tri.normals;\n\t\t\tconst faceNormal = tri.faceNormal;\n\n\t\t\t// Check if any edge is connected to another triangle edge\n\t\t\tconst vertCount = vertices.length;\n\t\t\tfor ( let i2 = 0; i2 < vertCount; i2 ++ ) {\n\n\t\t\t\tconst index = i2;\n\t\t\t\tconst next = ( i2 + 1 ) % vertCount;\n\t\t\t\tconst v0 = vertices[ index ];\n\t\t\t\tconst v1 = vertices[ next ];\n\n\t\t\t\t// delete this triangle from the list so it won't be found again\n\t\t\t\tconst hash = hashEdge( v0, v1 );\n\t\t\t\tdelete halfEdgeList[ hash ];\n\n\t\t\t\tconst reverseHash = hashEdge( v1, v0 );\n\t\t\t\tconst otherInfo = halfEdgeList[ reverseHash ];\n\t\t\t\tif ( otherInfo ) {\n\n\t\t\t\t\tconst otherTri = otherInfo.tri;\n\t\t\t\t\tconst otherIndex = otherInfo.index;\n\t\t\t\t\tconst otherNormals = otherTri.normals;\n\t\t\t\t\tconst otherVertCount = otherNormals.length;\n\t\t\t\t\tconst otherFaceNormal = otherTri.faceNormal;\n\n\t\t\t\t\t// NOTE: If the angle between faces is > 67.5 degrees then assume it's\n\t\t\t\t\t// hard edge. There are some cases where the line segments do not line up exactly\n\t\t\t\t\t// with or span multiple triangle edges (see Lunar Vehicle wheels).\n\t\t\t\t\tif ( Math.abs( otherTri.faceNormal.dot( tri.faceNormal ) ) < 0.25 ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if this triangle has already been traversed then it won't be in\n\t\t\t\t\t// the halfEdgeList. If it has not then add it to the queue and delete\n\t\t\t\t\t// it so it won't be found again.\n\t\t\t\t\tif ( reverseHash in halfEdgeList ) {\n\n\t\t\t\t\t\tqueue.push( otherInfo );\n\t\t\t\t\t\tdelete halfEdgeList[ reverseHash ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// share the first normal\n\t\t\t\t\tconst otherNext = ( otherIndex + 1 ) % otherVertCount;\n\t\t\t\t\tif (\n\t\t\t\t\t\tvertNormals[ index ] && otherNormals[ otherNext ] &&\n\t\t\t\t\t\tvertNormals[ index ] !== otherNormals[ otherNext ]\n\t\t\t\t\t) {\n\n\t\t\t\t\t\totherNormals[ otherNext ].norm.add( vertNormals[ index ].norm );\n\t\t\t\t\t\tvertNormals[ index ].norm = otherNormals[ otherNext ].norm;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sharedNormal1 = vertNormals[ index ] || otherNormals[ otherNext ];\n\t\t\t\t\tif ( sharedNormal1 === null ) {\n\n\t\t\t\t\t\t// it's possible to encounter an edge of a triangle that has already been traversed meaning\n\t\t\t\t\t\t// both edges already have different normals defined and shared. To work around this we create\n\t\t\t\t\t\t// a wrapper object so when those edges are merged the normals can be updated everywhere.\n\t\t\t\t\t\tsharedNormal1 = { norm: new Vector3() };\n\t\t\t\t\t\tnormals.push( sharedNormal1.norm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( vertNormals[ index ] === null ) {\n\n\t\t\t\t\t\tvertNormals[ index ] = sharedNormal1;\n\t\t\t\t\t\tsharedNormal1.norm.add( faceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( otherNormals[ otherNext ] === null ) {\n\n\t\t\t\t\t\totherNormals[ otherNext ] = sharedNormal1;\n\t\t\t\t\t\tsharedNormal1.norm.add( otherFaceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// share the second normal\n\t\t\t\t\tif (\n\t\t\t\t\t\tvertNormals[ next ] && otherNormals[ otherIndex ] &&\n\t\t\t\t\t\tvertNormals[ next ] !== otherNormals[ otherIndex ]\n\t\t\t\t\t) {\n\n\t\t\t\t\t\totherNormals[ otherIndex ].norm.add( vertNormals[ next ].norm );\n\t\t\t\t\t\tvertNormals[ next ].norm = otherNormals[ otherIndex ].norm;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet sharedNormal2 = vertNormals[ next ] || otherNormals[ otherIndex ];\n\t\t\t\t\tif ( sharedNormal2 === null ) {\n\n\t\t\t\t\t\tsharedNormal2 = { norm: new Vector3() };\n\t\t\t\t\t\tnormals.push( sharedNormal2.norm );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( vertNormals[ next ] === null ) {\n\n\t\t\t\t\t\tvertNormals[ next ] = sharedNormal2;\n\t\t\t\t\t\tsharedNormal2.norm.add( faceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( otherNormals[ otherIndex ] === null ) {\n\n\t\t\t\t\t\totherNormals[ otherIndex ] = sharedNormal2;\n\t\t\t\t\t\tsharedNormal2.norm.add( otherFaceNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// The normals of each face have been added up so now we average them by normalizing the vector.\n\tfor ( let i = 0, l = normals.length; i < l; i ++ ) {\n\n\t\tnormals[ i ].normalize();\n\n\t}\n\n}\n\nfunction isPartType( type ) {\n\n\treturn type === 'Part' || type === 'Unofficial_Part';\n\n}\n\nfunction isPrimitiveType( type ) {\n\n\treturn /primitive/i.test( type ) || type === 'Subpart';\n\n}\n\nclass LineParser {\n\n\tconstructor( line, lineNumber ) {\n\n\t\tthis.line = line;\n\t\tthis.lineLength = line.length;\n\t\tthis.currentCharIndex = 0;\n\t\tthis.currentChar = ' ';\n\t\tthis.lineNumber = lineNumber;\n\n\t}\n\n\tseekNonSpace() {\n\n\t\twhile ( this.currentCharIndex < this.lineLength ) {\n\n\t\t\tthis.currentChar = this.line.charAt( this.currentCharIndex );\n\n\t\t\tif ( this.currentChar !== ' ' && this.currentChar !== '\\t' ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.currentCharIndex ++;\n\n\t\t}\n\n\t}\n\n\tgetToken() {\n\n\t\tconst pos0 = this.currentCharIndex ++;\n\n\t\t// Seek space\n\t\twhile ( this.currentCharIndex < this.lineLength ) {\n\n\t\t\tthis.currentChar = this.line.charAt( this.currentCharIndex );\n\n\t\t\tif ( this.currentChar === ' ' || this.currentChar === '\\t' ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tthis.currentCharIndex ++;\n\n\t\t}\n\n\t\tconst pos1 = this.currentCharIndex;\n\n\t\tthis.seekNonSpace();\n\n\t\treturn this.line.substring( pos0, pos1 );\n\n\t}\n\n\tgetVector() {\n\n\t\treturn new Vector3( parseFloat( this.getToken() ), parseFloat( this.getToken() ), parseFloat( this.getToken() ) );\n\n\t}\n\n\tgetRemainingString() {\n\n\t\treturn this.line.substring( this.currentCharIndex, this.lineLength );\n\n\t}\n\n\tisAtTheEnd() {\n\n\t\treturn this.currentCharIndex >= this.lineLength;\n\n\t}\n\n\tsetToEnd() {\n\n\t\tthis.currentCharIndex = this.lineLength;\n\n\t}\n\n\tgetLineNumberString() {\n\n\t\treturn this.lineNumber >= 0 ? ' at line ' + this.lineNumber : '';\n\n\t}\n\n}\n\n// Fetches and parses an intermediate representation of LDraw parts files.\nclass LDrawParsedCache {\n\n\tconstructor( loader ) {\n\n\t\tthis.loader = loader;\n\t\tthis._cache = {};\n\n\t}\n\n\tcloneResult( original ) {\n\n\t\tconst result = {};\n\n\t\t// vertices are transformed and normals computed before being converted to geometry\n\t\t// so these pieces must be cloned.\n\t\tresult.faces = original.faces.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() ),\n\t\t\t\tnormals: face.normals.map( () => null ),\n\t\t\t\tfaceNormal: null\n\t\t\t};\n\n\t\t} );\n\n\t\tresult.conditionalSegments = original.conditionalSegments.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() ),\n\t\t\t\tcontrolPoints: face.controlPoints.map( v => v.clone() )\n\t\t\t};\n\n\t\t} );\n\n\t\tresult.lineSegments = original.lineSegments.map( face => {\n\n\t\t\treturn {\n\t\t\t\tcolorCode: face.colorCode,\n\t\t\t\tmaterial: face.material,\n\t\t\t\tvertices: face.vertices.map( v => v.clone() )\n\t\t\t};\n\n\t\t} );\n\n\t\t// none if this is subsequently modified\n\t\tresult.type = original.type;\n\t\tresult.category = original.category;\n\t\tresult.keywords = original.keywords;\n\t\tresult.author = original.author;\n\t\tresult.subobjects = original.subobjects;\n\t\tresult.fileName = original.fileName;\n\t\tresult.totalFaces = original.totalFaces;\n\t\tresult.startingBuildingStep = original.startingBuildingStep;\n\t\tresult.materials = original.materials;\n\t\tresult.group = null;\n\t\treturn result;\n\n\t}\n\n\tasync fetchData( fileName ) {\n\n\t\tlet triedLowerCase = false;\n\t\tlet locationState = FILE_LOCATION_TRY_PARTS;\n\t\twhile ( locationState !== FILE_LOCATION_NOT_FOUND ) {\n\n\t\t\tlet subobjectURL = fileName;\n\t\t\tswitch ( locationState ) {\n\n\t\t\t\tcase FILE_LOCATION_AS_IS:\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_PARTS:\n\t\t\t\t\tsubobjectURL = 'parts/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_P:\n\t\t\t\t\tsubobjectURL = 'p/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_MODELS:\n\t\t\t\t\tsubobjectURL = 'models/' + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_RELATIVE:\n\t\t\t\t\tsubobjectURL = fileName.substring( 0, fileName.lastIndexOf( '/' ) + 1 ) + subobjectURL;\n\t\t\t\t\tlocationState = locationState + 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILE_LOCATION_TRY_ABSOLUTE:\n\n\t\t\t\t\tif ( triedLowerCase ) {\n\n\t\t\t\t\t\t// Try absolute path\n\t\t\t\t\t\tlocationState = FILE_LOCATION_NOT_FOUND;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Next attempt is lower case\n\t\t\t\t\t\tfileName = fileName.toLowerCase();\n\t\t\t\t\t\tsubobjectURL = fileName;\n\t\t\t\t\t\ttriedLowerCase = true;\n\t\t\t\t\t\tlocationState = FILE_LOCATION_TRY_PARTS;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tconst loader = this.loader;\n\t\t\tconst fileLoader = new FileLoader( loader.manager );\n\t\t\tfileLoader.setPath( loader.partsLibraryPath );\n\t\t\tfileLoader.setRequestHeader( loader.requestHeader );\n\t\t\tfileLoader.setWithCredentials( loader.withCredentials );\n\n\t\t\ttry {\n\n\t\t\t\tconst text = await fileLoader.loadAsync( subobjectURL );\n\t\t\t\treturn text;\n\n\t\t\t} catch {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthrow new Error( 'LDrawLoader: Subobject \"' + fileName + '\" could not be loaded.' );\n\n\t}\n\n\tparse( text, fileName = null ) {\n\n\t\tconst loader = this.loader;\n\n\t\t// final results\n\t\tconst faces = [];\n\t\tconst lineSegments = [];\n\t\tconst conditionalSegments = [];\n\t\tconst subobjects = [];\n\t\tconst materials = {};\n\n\t\tconst getLocalMaterial = colorCode => {\n\n\t\t\treturn materials[ colorCode ] || null;\n\n\t\t};\n\n\t\tlet type = 'Model';\n\t\tlet category = null;\n\t\tlet keywords = null;\n\t\tlet author = null;\n\t\tlet totalFaces = 0;\n\n\t\t// split into lines\n\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t}\n\n\t\tconst lines = text.split( '\\n' );\n\t\tconst numLines = lines.length;\n\n\t\tlet parsingEmbeddedFiles = false;\n\t\tlet currentEmbeddedFileName = null;\n\t\tlet currentEmbeddedText = null;\n\n\t\tlet bfcCertified = false;\n\t\tlet bfcCCW = true;\n\t\tlet bfcInverted = false;\n\t\tlet bfcCull = true;\n\n\t\tlet startingBuildingStep = false;\n\n\t\t// Parse all line commands\n\t\tfor ( let lineIndex = 0; lineIndex < numLines; lineIndex ++ ) {\n\n\t\t\tconst line = lines[ lineIndex ];\n\n\t\t\tif ( line.length === 0 ) continue;\n\n\t\t\tif ( parsingEmbeddedFiles ) {\n\n\t\t\t\tif ( line.startsWith( '0 FILE ' ) ) {\n\n\t\t\t\t\t// Save previous embedded file in the cache\n\t\t\t\t\tthis.setData( currentEmbeddedFileName, currentEmbeddedText );\n\n\t\t\t\t\t// New embedded text file\n\t\t\t\t\tcurrentEmbeddedFileName = line.substring( 7 );\n\t\t\t\t\tcurrentEmbeddedText = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentEmbeddedText += line + '\\n';\n\n\t\t\t\t}\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst lp = new LineParser( line, lineIndex + 1 );\n\t\t\tlp.seekNonSpace();\n\n\t\t\tif ( lp.isAtTheEnd() ) {\n\n\t\t\t\t// Empty line\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Parse the line type\n\t\t\tconst lineType = lp.getToken();\n\n\t\t\tlet material;\n\t\t\tlet colorCode;\n\t\t\tlet segment;\n\t\t\tlet ccw;\n\t\t\tlet doubleSided;\n\t\t\tlet v0, v1, v2, v3, c0, c1;\n\n\t\t\tswitch ( lineType ) {\n\n\t\t\t\t// Line type 0: Comment or META\n\t\t\t\tcase '0':\n\n\t\t\t\t\t// Parse meta directive\n\t\t\t\t\tconst meta = lp.getToken();\n\n\t\t\t\t\tif ( meta ) {\n\n\t\t\t\t\t\tswitch ( meta ) {\n\n\t\t\t\t\t\t\tcase '!LDRAW_ORG':\n\n\t\t\t\t\t\t\t\ttype = lp.getToken();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!COLOUR':\n\n\t\t\t\t\t\t\t\tmaterial = loader.parseColorMetaDirective( lp );\n\t\t\t\t\t\t\t\tif ( material ) {\n\n\t\t\t\t\t\t\t\t\tmaterials[ material.userData.code ] = material;\n\n\t\t\t\t\t\t\t\t}\telse {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'LDrawLoader: Error parsing material' + lp.getLineNumberString() );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!CATEGORY':\n\n\t\t\t\t\t\t\t\tcategory = lp.getToken();\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase '!KEYWORDS':\n\n\t\t\t\t\t\t\t\tconst newKeywords = lp.getRemainingString().split( ',' );\n\t\t\t\t\t\t\t\tif ( newKeywords.length > 0 ) {\n\n\t\t\t\t\t\t\t\t\tif ( ! keywords ) {\n\n\t\t\t\t\t\t\t\t\t\tkeywords = [];\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tnewKeywords.forEach( function ( keyword ) {\n\n\t\t\t\t\t\t\t\t\t\tkeywords.push( keyword.trim() );\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'FILE':\n\n\t\t\t\t\t\t\t\tif ( lineIndex > 0 ) {\n\n\t\t\t\t\t\t\t\t\t// Start embedded text files parsing\n\t\t\t\t\t\t\t\t\tparsingEmbeddedFiles = true;\n\t\t\t\t\t\t\t\t\tcurrentEmbeddedFileName = lp.getRemainingString();\n\t\t\t\t\t\t\t\t\tcurrentEmbeddedText = '';\n\n\t\t\t\t\t\t\t\t\tbfcCertified = false;\n\t\t\t\t\t\t\t\t\tbfcCCW = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'BFC':\n\n\t\t\t\t\t\t\t\t// Changes to the backface culling state\n\t\t\t\t\t\t\t\twhile ( ! lp.isAtTheEnd() ) {\n\n\t\t\t\t\t\t\t\t\tconst token = lp.getToken();\n\n\t\t\t\t\t\t\t\t\tswitch ( token ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'CERTIFY':\n\t\t\t\t\t\t\t\t\t\tcase 'NOCERTIFY':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCertified = token === 'CERTIFY';\n\t\t\t\t\t\t\t\t\t\t\tbfcCCW = true;\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'CW':\n\t\t\t\t\t\t\t\t\t\tcase 'CCW':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCCW = token === 'CCW';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'INVERTNEXT':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcInverted = true;\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'CLIP':\n\t\t\t\t\t\t\t\t\t\tcase 'NOCLIP':\n\n\t\t\t\t\t\t\t\t\t\t\tbfcCull = token === 'CLIP';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.LDrawLoader: BFC directive \"' + token + '\" is unknown.' );\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'STEP':\n\n\t\t\t\t\t\t\t\tstartingBuildingStep = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'Author:':\n\n\t\t\t\t\t\t\t\tauthor = lp.getToken();\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t// Other meta directives are not implemented\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 1: Sub-object file\n\t\t\t\tcase '1':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\n\t\t\t\t\tconst posX = parseFloat( lp.getToken() );\n\t\t\t\t\tconst posY = parseFloat( lp.getToken() );\n\t\t\t\t\tconst posZ = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m0 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m1 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m2 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m3 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m4 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m5 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m6 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m7 = parseFloat( lp.getToken() );\n\t\t\t\t\tconst m8 = parseFloat( lp.getToken() );\n\n\t\t\t\t\tconst matrix = new Matrix4().set(\n\t\t\t\t\t\tm0, m1, m2, posX,\n\t\t\t\t\t\tm3, m4, m5, posY,\n\t\t\t\t\t\tm6, m7, m8, posZ,\n\t\t\t\t\t\t0, 0, 0, 1\n\t\t\t\t\t);\n\n\t\t\t\t\tlet fileName = lp.getRemainingString().trim().replace( /\\\\/g, '/' );\n\n\t\t\t\t\tif ( loader.fileMap[ fileName ] ) {\n\n\t\t\t\t\t\t// Found the subobject path in the preloaded file path map\n\t\t\t\t\t\tfileName = loader.fileMap[ fileName ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Standardized subfolders\n\t\t\t\t\t\tif ( fileName.startsWith( 's/' ) ) {\n\n\t\t\t\t\t\t\tfileName = 'parts/' + fileName;\n\n\t\t\t\t\t\t} else if ( fileName.startsWith( '48/' ) ) {\n\n\t\t\t\t\t\t\tfileName = 'p/' + fileName;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsubobjects.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tmatrix: matrix,\n\t\t\t\t\t\tfileName: fileName,\n\t\t\t\t\t\tinverted: bfcInverted,\n\t\t\t\t\t\tstartingBuildingStep: startingBuildingStep\n\t\t\t\t\t} );\n\n\t\t\t\t\tstartingBuildingStep = false;\n\t\t\t\t\tbfcInverted = false;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 2: Line segment\n\t\t\t\tcase '2':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\tv1 = lp.getVector();\n\n\t\t\t\t\tsegment = {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tvertices: [ v0, v1 ],\n\t\t\t\t\t};\n\n\t\t\t\t\tlineSegments.push( segment );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 5: Conditional Line segment\n\t\t\t\tcase '5':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\tc0 = lp.getVector();\n\t\t\t\t\tc1 = lp.getVector();\n\n\t\t\t\t\tsegment = {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tvertices: [ v0, v1 ],\n\t\t\t\t\t\tcontrolPoints: [ c0, c1 ],\n\t\t\t\t\t};\n\n\t\t\t\t\tconditionalSegments.push( segment );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 3: Triangle\n\t\t\t\tcase '3':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tccw = bfcCCW;\n\t\t\t\t\tdoubleSided = ! bfcCertified || ! bfcCull;\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv0 = lp.getVector();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\tvertices: [ v0, v1, v2 ],\n\t\t\t\t\t\tnormals: [ null, null, null ],\n\t\t\t\t\t} );\n\t\t\t\t\ttotalFaces ++;\n\n\t\t\t\t\tif ( doubleSided === true ) {\n\n\t\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\t\tvertices: [ v2, v1, v0 ],\n\t\t\t\t\t\t\tnormals: [ null, null, null ],\n\t\t\t\t\t\t} );\n\t\t\t\t\t\ttotalFaces ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Line type 4: Quadrilateral\n\t\t\t\tcase '4':\n\n\t\t\t\t\tcolorCode = lp.getToken();\n\t\t\t\t\tmaterial = getLocalMaterial( colorCode );\n\t\t\t\t\tccw = bfcCCW;\n\t\t\t\t\tdoubleSided = ! bfcCertified || ! bfcCull;\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tv0 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv3 = lp.getVector();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv3 = lp.getVector();\n\t\t\t\t\t\tv2 = lp.getVector();\n\t\t\t\t\t\tv1 = lp.getVector();\n\t\t\t\t\t\tv0 = lp.getVector();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// specifically place the triangle diagonal in the v0 and v1 slots so we can\n\t\t\t\t\t// account for the doubling of vertices later when smoothing normals.\n\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\tvertices: [ v0, v1, v2, v3 ],\n\t\t\t\t\t\tnormals: [ null, null, null, null ],\n\t\t\t\t\t} );\n\t\t\t\t\ttotalFaces += 2;\n\n\t\t\t\t\tif ( doubleSided === true ) {\n\n\t\t\t\t\t\tfaces.push( {\n\t\t\t\t\t\t\tmaterial: material,\n\t\t\t\t\t\t\tcolorCode: colorCode,\n\t\t\t\t\t\t\tfaceNormal: null,\n\t\t\t\t\t\t\tvertices: [ v3, v2, v1, v0 ],\n\t\t\t\t\t\t\tnormals: [ null, null, null, null ],\n\t\t\t\t\t\t} );\n\t\t\t\t\t\ttotalFaces += 2;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'LDrawLoader: Unknown line type \"' + lineType + '\"' + lp.getLineNumberString() + '.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parsingEmbeddedFiles ) {\n\n\t\t\tthis.setData( currentEmbeddedFileName, currentEmbeddedText );\n\n\t\t}\n\n\t\treturn {\n\t\t\tfaces,\n\t\t\tconditionalSegments,\n\t\t\tlineSegments,\n\t\t\ttype,\n\t\t\tcategory,\n\t\t\tkeywords,\n\t\t\tauthor,\n\t\t\tsubobjects,\n\t\t\ttotalFaces,\n\t\t\tstartingBuildingStep,\n\t\t\tmaterials,\n\t\t\tfileName,\n\t\t\tgroup: null\n\t\t};\n\n\t}\n\n\t// returns an (optionally cloned) instance of the data\n\tgetData( fileName, clone = true ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tconst result = this._cache[ key ];\n\t\tif ( result === null || result instanceof Promise ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( clone ) {\n\n\t\t\treturn this.cloneResult( result );\n\n\t\t} else {\n\n\t\t\treturn result;\n\n\t\t}\n\n\t}\n\n\t// kicks off a fetch and parse of the requested data if it hasn't already been loaded. Returns when\n\t// the data is ready to use and can be retrieved synchronously with \"getData\".\n\tasync ensureDataLoaded( fileName ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tif ( ! ( key in this._cache ) ) {\n\n\t\t\t// replace the promise with a copy of the parsed data for immediate processing\n\t\t\tthis._cache[ key ] = this.fetchData( fileName ).then( text => {\n\n\t\t\t\tconst info = this.parse( text, fileName );\n\t\t\t\tthis._cache[ key ] = info;\n\t\t\t\treturn info;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tawait this._cache[ key ];\n\n\t}\n\n\t// sets the data in the cache from parsed data\n\tsetData( fileName, text ) {\n\n\t\tconst key = fileName.toLowerCase();\n\t\tthis._cache[ key ] = this.parse( text, fileName );\n\n\t}\n\n}\n\n// returns the material for an associated color code. If the color code is 16 for a face or 24 for\n// an edge then the passthroughColorCode is used.\nfunction getMaterialFromCode( colorCode, parentColorCode, materialHierarchy, forEdge ) {\n\n\tconst isPassthrough = ! forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\tif ( isPassthrough ) {\n\n\t\tcolorCode = parentColorCode;\n\n\t}\n\n\treturn materialHierarchy[ colorCode ] || null;\n\n}\n\n// Class used to parse and build LDraw parts as three.js objects and cache them if they're a \"Part\" type.\nclass LDrawPartsGeometryCache {\n\n\tconstructor( loader ) {\n\n\t\tthis.loader = loader;\n\t\tthis.parseCache = new LDrawParsedCache( loader );\n\t\tthis._cache = {};\n\n\t}\n\n\t// Convert the given file information into a mesh by processing subobjects.\n\tasync processIntoMesh( info ) {\n\n\t\tconst loader = this.loader;\n\t\tconst parseCache = this.parseCache;\n\t\tconst faceMaterials = new Set();\n\n\t\t// Processes the part subobject information to load child parts and merge geometry onto part\n\t\t// piece object.\n\t\tconst processInfoSubobjects = async ( info, subobject = null ) => {\n\n\t\t\tconst subobjects = info.subobjects;\n\t\t\tconst promises = [];\n\n\t\t\t// Trigger load of all subobjects. If a subobject isn't a primitive then load it as a separate\n\t\t\t// group which lets instruction steps apply correctly.\n\t\t\tfor ( let i = 0, l = subobjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst subobject = subobjects[ i ];\n\t\t\t\tconst promise = parseCache.ensureDataLoaded( subobject.fileName ).then( () => {\n\n\t\t\t\t\tconst subobjectInfo = parseCache.getData( subobject.fileName, false );\n\t\t\t\t\tif ( ! isPrimitiveType( subobjectInfo.type ) ) {\n\n\t\t\t\t\t\treturn this.loadModel( subobject.fileName ).catch( error => {\n\n\t\t\t\t\t\t\tconsole.warn( error );\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn processInfoSubobjects( parseCache.getData( subobject.fileName ), subobject );\n\n\t\t\t\t} );\n\n\t\t\t\tpromises.push( promise );\n\n\t\t\t}\n\n\t\t\tconst group = new Group();\n\t\t\tgroup.userData.category = info.category;\n\t\t\tgroup.userData.keywords = info.keywords;\n\t\t\tgroup.userData.author = info.author;\n\t\t\tgroup.userData.type = info.type;\n\t\t\tgroup.userData.fileName = info.fileName;\n\t\t\tinfo.group = group;\n\n\t\t\tconst subobjectInfos = await Promise.all( promises );\n\t\t\tfor ( let i = 0, l = subobjectInfos.length; i < l; i ++ ) {\n\n\t\t\t\tconst subobject = info.subobjects[ i ];\n\t\t\t\tconst subobjectInfo = subobjectInfos[ i ];\n\n\t\t\t\tif ( subobjectInfo === null ) {\n\n\t\t\t\t\t// the subobject failed to load\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// if the subobject was loaded as a separate group then apply the parent scopes materials\n\t\t\t\tif ( subobjectInfo.isGroup ) {\n\n\t\t\t\t\tconst subobjectGroup = subobjectInfo;\n\t\t\t\t\tsubobject.matrix.decompose( subobjectGroup.position, subobjectGroup.quaternion, subobjectGroup.scale );\n\t\t\t\t\tsubobjectGroup.userData.startingBuildingStep = subobject.startingBuildingStep;\n\t\t\t\t\tsubobjectGroup.name = subobject.fileName;\n\n\t\t\t\t\tloader.applyMaterialsToMesh( subobjectGroup, subobject.colorCode, info.materials );\n\t\t\t\t\tsubobjectGroup.userData.colorCode = subobject.colorCode;\n\n\t\t\t\t\tgroup.add( subobjectGroup );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// add the subobject group if it has children in case it has both children and primitives\n\t\t\t\tif ( subobjectInfo.group.children.length ) {\n\n\t\t\t\t\tgroup.add( subobjectInfo.group );\n\n\t\t\t\t}\n\n\t\t\t\t// transform the primitives into the local space of the parent piece and append them to\n\t\t\t\t// to the parent primitives list.\n\t\t\t\tconst parentLineSegments = info.lineSegments;\n\t\t\t\tconst parentConditionalSegments = info.conditionalSegments;\n\t\t\t\tconst parentFaces = info.faces;\n\n\t\t\t\tconst lineSegments = subobjectInfo.lineSegments;\n\t\t\t\tconst conditionalSegments = subobjectInfo.conditionalSegments;\n\n\t\t\t\tconst faces = subobjectInfo.faces;\n\t\t\t\tconst matrix = subobject.matrix;\n\t\t\t\tconst inverted = subobject.inverted;\n\t\t\t\tconst matrixScaleInverted = matrix.determinant() < 0;\n\t\t\t\tconst colorCode = subobject.colorCode;\n\n\t\t\t\tconst lineColorCode = colorCode === MAIN_COLOUR_CODE ? MAIN_EDGE_COLOUR_CODE : colorCode;\n\t\t\t\tfor ( let i = 0, l = lineSegments.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst ls = lineSegments[ i ];\n\t\t\t\t\tconst vertices = ls.vertices;\n\t\t\t\t\tvertices[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tvertices[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tls.colorCode = ls.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : ls.colorCode;\n\t\t\t\t\tls.material = ls.material || getMaterialFromCode( ls.colorCode, ls.colorCode, info.materials, true );\n\n\t\t\t\t\tparentLineSegments.push( ls );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, l = conditionalSegments.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst os = conditionalSegments[ i ];\n\t\t\t\t\tconst vertices = os.vertices;\n\t\t\t\t\tconst controlPoints = os.controlPoints;\n\t\t\t\t\tvertices[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tvertices[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tcontrolPoints[ 0 ].applyMatrix4( matrix );\n\t\t\t\t\tcontrolPoints[ 1 ].applyMatrix4( matrix );\n\t\t\t\t\tos.colorCode = os.colorCode === MAIN_EDGE_COLOUR_CODE ? lineColorCode : os.colorCode;\n\t\t\t\t\tos.material = os.material || getMaterialFromCode( os.colorCode, os.colorCode, info.materials, true );\n\n\t\t\t\t\tparentConditionalSegments.push( os );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst tri = faces[ i ];\n\t\t\t\t\tconst vertices = tri.vertices;\n\t\t\t\t\tfor ( let i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvertices[ i ].applyMatrix4( matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttri.colorCode = tri.colorCode === MAIN_COLOUR_CODE ? colorCode : tri.colorCode;\n\t\t\t\t\ttri.material = tri.material || getMaterialFromCode( tri.colorCode, colorCode, info.materials, false );\n\t\t\t\t\tfaceMaterials.add( tri.colorCode );\n\n\t\t\t\t\t// If the scale of the object is negated then the triangle winding order\n\t\t\t\t\t// needs to be flipped.\n\t\t\t\t\tif ( matrixScaleInverted !== inverted ) {\n\n\t\t\t\t\t\tvertices.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tparentFaces.push( tri );\n\n\t\t\t\t}\n\n\t\t\t\tinfo.totalFaces += subobjectInfo.totalFaces;\n\n\t\t\t}\n\n\t\t\t// Apply the parent subobjects pass through material code to this object. This is done several times due\n\t\t\t// to material scoping.\n\t\t\tif ( subobject ) {\n\n\t\t\t\tloader.applyMaterialsToMesh( group, subobject.colorCode, info.materials );\n\t\t\t\tgroup.userData.colorCode = subobject.colorCode;\n\n\t\t\t}\n\n\t\t\treturn info;\n\n\t\t};\n\n\t\t// Track material use to see if we need to use the normal smooth slow path for hard edges.\n\t\tfor ( let i = 0, l = info.faces; i < l; i ++ ) {\n\n\t\t\tfaceMaterials.add( info.faces[ i ].colorCode );\n\n\t\t}\n\n\t\tawait processInfoSubobjects( info );\n\n\t\tif ( loader.smoothNormals ) {\n\n\t\t\tconst checkSubSegments = faceMaterials.size > 1;\n\t\t\tgenerateFaceNormals( info.faces );\n\t\t\tsmoothNormals( info.faces, info.lineSegments, checkSubSegments );\n\n\t\t}\n\n\t\t// Add the primitive objects and metadata.\n\t\tconst group = info.group;\n\t\tif ( info.faces.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.faces, 3, false, info.totalFaces ) );\n\n\t\t}\n\n\t\tif ( info.lineSegments.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.lineSegments, 2 ) );\n\n\t\t}\n\n\t\tif ( info.conditionalSegments.length > 0 ) {\n\n\t\t\tgroup.add( createObject( info.conditionalSegments, 2, true ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t}\n\n\thasCachedModel( fileName ) {\n\n\t\treturn fileName !== null && fileName.toLowerCase() in this._cache;\n\n\t}\n\n\tasync getCachedModel( fileName ) {\n\n\t\tif ( fileName !== null && this.hasCachedModel( fileName ) ) {\n\n\t\t\tconst key = fileName.toLowerCase();\n\t\t\tconst group = await this._cache[ key ];\n\t\t\treturn group.clone();\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\t// Loads and parses the model with the given file name. Returns a cached copy if available.\n\tasync loadModel( fileName ) {\n\n\t\tconst parseCache = this.parseCache;\n\t\tconst key = fileName.toLowerCase();\n\t\tif ( this.hasCachedModel( fileName ) ) {\n\n\t\t\t// Return cached model if available.\n\t\t\treturn this.getCachedModel( fileName );\n\n\t\t} else {\n\n\t\t\t// Otherwise parse a new model.\n\t\t\t// Ensure the file data is loaded and pre parsed.\n\t\t\tawait parseCache.ensureDataLoaded( fileName );\n\n\t\t\tconst info = parseCache.getData( fileName );\n\t\t\tconst promise = this.processIntoMesh( info );\n\n\t\t\t// Now that the file has loaded it's possible that another part parse has been waiting in parallel\n\t\t\t// so check the cache again to see if it's been added since the last async operation so we don't\n\t\t\t// do unnecessary work.\n\t\t\tif ( this.hasCachedModel( fileName ) ) {\n\n\t\t\t\treturn this.getCachedModel( fileName );\n\n\t\t\t}\n\n\t\t\t// Cache object if it's a part so it can be reused later.\n\t\t\tif ( isPartType( info.type ) ) {\n\n\t\t\t\tthis._cache[ key ] = promise;\n\n\t\t\t}\n\n\t\t\t// return a copy\n\t\t\tconst group = await promise;\n\t\t\treturn group.clone();\n\n\t\t}\n\n\t}\n\n\t// parses the given model text into a renderable object. Returns cached copy if available.\n\tasync parseModel( text ) {\n\n\t\tconst parseCache = this.parseCache;\n\t\tconst info = parseCache.parse( text );\n\t\tif ( isPartType( info.type ) && this.hasCachedModel( info.fileName ) ) {\n\n\t\t\treturn this.getCachedModel( info.fileName );\n\n\t\t}\n\n\t\treturn this.processIntoMesh( info );\n\n\t}\n\n}\n\nfunction sortByMaterial( a, b ) {\n\n\tif ( a.colorCode === b.colorCode ) {\n\n\t\treturn 0;\n\n\t}\n\n\tif ( a.colorCode < b.colorCode ) {\n\n\t\treturn - 1;\n\n\t}\n\n\treturn 1;\n\n}\n\nfunction createObject( elements, elementSize, isConditionalSegments = false, totalElements = null ) {\n\n\t// Creates a LineSegments (elementSize = 2) or a Mesh (elementSize = 3 )\n\t// With per face / segment material, implemented with mesh groups and materials array\n\n\t// Sort the faces or line segments by color code to make later the mesh groups\n\telements.sort( sortByMaterial );\n\n\tif ( totalElements === null ) {\n\n\t\ttotalElements = elements.length;\n\n\t}\n\n\tconst positions = new Float32Array( elementSize * totalElements * 3 );\n\tconst normals = elementSize === 3 ? new Float32Array( elementSize * totalElements * 3 ) : null;\n\tconst materials = [];\n\n\tconst quadArray = new Array( 6 );\n\tconst bufferGeometry = new BufferGeometry();\n\tlet prevMaterial = null;\n\tlet index0 = 0;\n\tlet numGroupVerts = 0;\n\tlet offset = 0;\n\n\tfor ( let iElem = 0, nElem = elements.length; iElem < nElem; iElem ++ ) {\n\n\t\tconst elem = elements[ iElem ];\n\t\tlet vertices = elem.vertices;\n\t\tif ( vertices.length === 4 ) {\n\n\t\t\tquadArray[ 0 ] = vertices[ 0 ];\n\t\t\tquadArray[ 1 ] = vertices[ 1 ];\n\t\t\tquadArray[ 2 ] = vertices[ 2 ];\n\t\t\tquadArray[ 3 ] = vertices[ 0 ];\n\t\t\tquadArray[ 4 ] = vertices[ 2 ];\n\t\t\tquadArray[ 5 ] = vertices[ 3 ];\n\t\t\tvertices = quadArray;\n\n\t\t}\n\n\t\tfor ( let j = 0, l = vertices.length; j < l; j ++ ) {\n\n\t\t\tconst v = vertices[ j ];\n\t\t\tconst index = offset + j * 3;\n\t\t\tpositions[ index + 0 ] = v.x;\n\t\t\tpositions[ index + 1 ] = v.y;\n\t\t\tpositions[ index + 2 ] = v.z;\n\n\t\t}\n\n\t\t// create the normals array if this is a set of faces\n\t\tif ( elementSize === 3 ) {\n\n\t\t\tif ( ! elem.faceNormal ) {\n\n\t\t\t\tconst v0 = vertices[ 0 ];\n\t\t\t\tconst v1 = vertices[ 1 ];\n\t\t\t\tconst v2 = vertices[ 2 ];\n\t\t\t\t_tempVec0.subVectors( v1, v0 );\n\t\t\t\t_tempVec1.subVectors( v2, v1 );\n\t\t\t\telem.faceNormal = new Vector3()\n\t\t\t\t\t.crossVectors( _tempVec0, _tempVec1 )\n\t\t\t\t\t.normalize();\n\n\t\t\t}\n\n\t\t\tlet elemNormals = elem.normals;\n\t\t\tif ( elemNormals.length === 4 ) {\n\n\t\t\t\tquadArray[ 0 ] = elemNormals[ 0 ];\n\t\t\t\tquadArray[ 1 ] = elemNormals[ 1 ];\n\t\t\t\tquadArray[ 2 ] = elemNormals[ 2 ];\n\t\t\t\tquadArray[ 3 ] = elemNormals[ 0 ];\n\t\t\t\tquadArray[ 4 ] = elemNormals[ 2 ];\n\t\t\t\tquadArray[ 5 ] = elemNormals[ 3 ];\n\t\t\t\telemNormals = quadArray;\n\n\t\t\t}\n\n\t\t\tfor ( let j = 0, l = elemNormals.length; j < l; j ++ ) {\n\n\t\t\t\t// use face normal if a vertex normal is not provided\n\t\t\t\tlet n = elem.faceNormal;\n\t\t\t\tif ( elemNormals[ j ] ) {\n\n\t\t\t\t\tn = elemNormals[ j ].norm;\n\n\t\t\t\t}\n\n\t\t\t\tconst index = offset + j * 3;\n\t\t\t\tnormals[ index + 0 ] = n.x;\n\t\t\t\tnormals[ index + 1 ] = n.y;\n\t\t\t\tnormals[ index + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( prevMaterial !== elem.colorCode ) {\n\n\t\t\tif ( prevMaterial !== null ) {\n\n\t\t\t\tbufferGeometry.addGroup( index0, numGroupVerts, materials.length - 1 );\n\n\t\t\t}\n\n\t\t\tconst material = elem.material;\n\n\t\t\tif ( material !== null ) {\n\n\t\t\t\tif ( elementSize === 3 ) {\n\n\t\t\t\t\tmaterials.push( material );\n\n\t\t\t\t} else if ( elementSize === 2 ) {\n\n\t\t\t\t\tif ( isConditionalSegments ) {\n\n\t\t\t\t\t\tmaterials.push( material.userData.edgeMaterial.userData.conditionalEdgeMaterial );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( material.userData.edgeMaterial );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// If a material has not been made available yet then keep the color code string in the material array\n\t\t\t\t// to save the spot for the material once a parent scopes materials are being applied to the object.\n\t\t\t\tmaterials.push( elem.colorCode );\n\n\t\t\t}\n\n\t\t\tprevMaterial = elem.colorCode;\n\t\t\tindex0 = offset / 3;\n\t\t\tnumGroupVerts = vertices.length;\n\n\t\t} else {\n\n\t\t\tnumGroupVerts += vertices.length;\n\n\t\t}\n\n\t\toffset += 3 * vertices.length;\n\n\t}\n\n\tif ( numGroupVerts > 0 ) {\n\n\t\tbufferGeometry.addGroup( index0, Infinity, materials.length - 1 );\n\n\t}\n\n\tbufferGeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\tif ( normals !== null ) {\n\n\t\tbufferGeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tlet object3d = null;\n\n\tif ( elementSize === 2 ) {\n\n\t\tif ( isConditionalSegments ) {\n\n\t\t\tobject3d = new ConditionalLineSegments( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t\t} else {\n\n\t\t\tobject3d = new LineSegments( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t\t}\n\n\t} else if ( elementSize === 3 ) {\n\n\t\tobject3d = new Mesh( bufferGeometry, materials.length === 1 ? materials[ 0 ] : materials );\n\n\t}\n\n\tif ( isConditionalSegments ) {\n\n\t\tobject3d.isConditionalLine = true;\n\n\t\tconst controlArray0 = new Float32Array( elements.length * 3 * 2 );\n\t\tconst controlArray1 = new Float32Array( elements.length * 3 * 2 );\n\t\tconst directionArray = new Float32Array( elements.length * 3 * 2 );\n\t\tfor ( let i = 0, l = elements.length; i < l; i ++ ) {\n\n\t\t\tconst os = elements[ i ];\n\t\t\tconst vertices = os.vertices;\n\t\t\tconst controlPoints = os.controlPoints;\n\t\t\tconst c0 = controlPoints[ 0 ];\n\t\t\tconst c1 = controlPoints[ 1 ];\n\t\t\tconst v0 = vertices[ 0 ];\n\t\t\tconst v1 = vertices[ 1 ];\n\t\t\tconst index = i * 3 * 2;\n\t\t\tcontrolArray0[ index + 0 ] = c0.x;\n\t\t\tcontrolArray0[ index + 1 ] = c0.y;\n\t\t\tcontrolArray0[ index + 2 ] = c0.z;\n\t\t\tcontrolArray0[ index + 3 ] = c0.x;\n\t\t\tcontrolArray0[ index + 4 ] = c0.y;\n\t\t\tcontrolArray0[ index + 5 ] = c0.z;\n\n\t\t\tcontrolArray1[ index + 0 ] = c1.x;\n\t\t\tcontrolArray1[ index + 1 ] = c1.y;\n\t\t\tcontrolArray1[ index + 2 ] = c1.z;\n\t\t\tcontrolArray1[ index + 3 ] = c1.x;\n\t\t\tcontrolArray1[ index + 4 ] = c1.y;\n\t\t\tcontrolArray1[ index + 5 ] = c1.z;\n\n\t\t\tdirectionArray[ index + 0 ] = v1.x - v0.x;\n\t\t\tdirectionArray[ index + 1 ] = v1.y - v0.y;\n\t\t\tdirectionArray[ index + 2 ] = v1.z - v0.z;\n\t\t\tdirectionArray[ index + 3 ] = v1.x - v0.x;\n\t\t\tdirectionArray[ index + 4 ] = v1.y - v0.y;\n\t\t\tdirectionArray[ index + 5 ] = v1.z - v0.z;\n\n\t\t}\n\n\t\tbufferGeometry.setAttribute( 'control0', new BufferAttribute( controlArray0, 3, false ) );\n\t\tbufferGeometry.setAttribute( 'control1', new BufferAttribute( controlArray1, 3, false ) );\n\t\tbufferGeometry.setAttribute( 'direction', new BufferAttribute( directionArray, 3, false ) );\n\n\t}\n\n\treturn object3d;\n\n}\n\n//\n\nclass LDrawLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// Array of THREE.Material\n\t\tthis.materials = [];\n\t\tthis.materialLibrary = {};\n\n\t\t// This also allows to handle the embedded text files (\"0 FILE\" lines)\n\t\tthis.partsCache = new LDrawPartsGeometryCache( this );\n\n\t\t// This object is a map from file names to paths. It agilizes the paths search. If it is not set then files will be searched by trial and error.\n\t\tthis.fileMap = {};\n\n\t\t// Initializes the materials library with default materials\n\t\tthis.setMaterials( [] );\n\n\t\t// If this flag is set to true the vertex normals will be smoothed.\n\t\tthis.smoothNormals = true;\n\n\t\t// The path to load parts from the LDraw parts library from.\n\t\tthis.partsLibraryPath = '';\n\n\t\t// Material assigned to not available colors for meshes and edges\n\t\tthis.missingColorMaterial = new MeshStandardMaterial( { color: 0xFF00FF, roughness: 0.3, metalness: 0 } );\n\t\tthis.missingColorMaterial.name = 'Missing material';\n\t\tthis.missingEdgeColorMaterial = new LineBasicMaterial( { color: 0xFF00FF } );\n\t\tthis.missingEdgeColorMaterial.name = 'Missing material - Edge';\n\t\tthis.missingConditionalEdgeColorMaterial = new LDrawConditionalLineMaterial( { fog: true, color: 0xFF00FF } );\n\t\tthis.missingConditionalEdgeColorMaterial.name = 'Missing material - Conditional Edge';\n\t\tthis.missingColorMaterial.userData.edgeMaterial = this.missingEdgeColorMaterial;\n\t\tthis.missingEdgeColorMaterial.userData.conditionalEdgeMaterial = this.missingConditionalEdgeColorMaterial;\n\n\t}\n\n\tsetPartsLibraryPath( path ) {\n\n\t\tthis.partsLibraryPath = path;\n\t\treturn this;\n\n\t}\n\n\tasync preloadMaterials( url ) {\n\n\t\tconst fileLoader = new FileLoader( this.manager );\n\t\tfileLoader.setPath( this.path );\n\t\tfileLoader.setRequestHeader( this.requestHeader );\n\t\tfileLoader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await fileLoader.loadAsync( url );\n\t\tconst colorLineRegex = /^0 !COLOUR/;\n\t\tconst lines = text.split( /[\\n\\r]/g );\n\t\tconst materials = [];\n\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\tconst line = lines[ i ];\n\t\t\tif ( colorLineRegex.test( line ) ) {\n\n\t\t\t\tconst directive = line.replace( colorLineRegex, '' );\n\t\t\t\tconst material = this.parseColorMetaDirective( new LineParser( directive ) );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setMaterials( materials );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst fileLoader = new FileLoader( this.manager );\n\t\tfileLoader.setPath( this.path );\n\t\tfileLoader.setRequestHeader( this.requestHeader );\n\t\tfileLoader.setWithCredentials( this.withCredentials );\n\t\tfileLoader.load( url, text => {\n\n\t\t\tthis.partsCache\n\t\t\t\t.parseModel( text, this.materialLibrary )\n\t\t\t\t.then( group => {\n\n\t\t\t\t\tthis.applyMaterialsToMesh( group, MAIN_COLOUR_CODE, this.materialLibrary, true );\n\t\t\t\t\tthis.computeBuildingSteps( group );\n\t\t\t\t\tgroup.userData.fileName = url;\n\t\t\t\t\tonLoad( group );\n\n\t\t\t\t} )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( text, onLoad ) {\n\n\t\tthis.partsCache\n\t\t\t.parseModel( text, this.materialLibrary )\n\t\t\t.then( group => {\n\n\t\t\t\tthis.applyMaterialsToMesh( group, MAIN_COLOUR_CODE, this.materialLibrary, true );\n\t\t\t\tthis.computeBuildingSteps( group );\n\t\t\t\tgroup.userData.fileName = '';\n\t\t\t\tonLoad( group );\n\n\t\t\t} );\n\n\t}\n\n\tsetMaterials( materials ) {\n\n\t\tthis.materialLibrary = {};\n\t\tthis.materials = [];\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tthis.addMaterial( materials[ i ] );\n\n\t\t}\n\n\t\t// Add default main triangle and line edge materials (used in pieces that can be colored with a main color)\n\t\tthis.addMaterial( this.parseColorMetaDirective( new LineParser( 'Main_Colour CODE 16 VALUE #FF8080 EDGE #333333' ) ) );\n\t\tthis.addMaterial( this.parseColorMetaDirective( new LineParser( 'Edge_Colour CODE 24 VALUE #A0A0A0 EDGE #333333' ) ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFileMap( fileMap ) {\n\n\t\tthis.fileMap = fileMap;\n\n\t\treturn this;\n\n\t}\n\n\taddMaterial( material ) {\n\n\t\t// Adds a material to the material library which is on top of the parse scopes stack. And also to the materials array\n\n\t\tconst matLib = this.materialLibrary;\n\t\tif ( ! matLib[ material.userData.code ] ) {\n\n\t\t\tthis.materials.push( material );\n\t\t\tmatLib[ material.userData.code ] = material;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetMaterial( colorCode ) {\n\n\t\tif ( colorCode.startsWith( '0x2' ) ) {\n\n\t\t\t// Special 'direct' material value (RGB color)\n\t\t\tconst color = colorCode.substring( 3 );\n\n\t\t\treturn this.parseColorMetaDirective( new LineParser( 'Direct_Color_' + color + ' CODE -1 VALUE #' + color + ' EDGE #' + color + '' ) );\n\n\t\t}\n\n\t\treturn this.materialLibrary[ colorCode ] || null;\n\n\t}\n\n\t// Applies the appropriate materials to a prebuilt hierarchy of geometry. Assumes that color codes are present\n\t// in the material array if they need to be filled in.\n\tapplyMaterialsToMesh( group, parentColorCode, materialHierarchy, finalMaterialPass = false ) {\n\n\t\t// find any missing materials as indicated by a color code string and replace it with a material from the current material lib\n\t\tconst loader = this;\n\t\tconst parentIsPassthrough = parentColorCode === MAIN_COLOUR_CODE;\n\t\tgroup.traverse( c => {\n\n\t\t\tif ( c.isMesh || c.isLineSegments ) {\n\n\t\t\t\tif ( Array.isArray( c.material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = c.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( ! c.material[ i ].isMaterial ) {\n\n\t\t\t\t\t\t\tc.material[ i ] = getMaterial( c, c.material[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( ! c.material.isMaterial ) {\n\n\t\t\t\t\tc.material = getMaterial( c, c.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\n\t\t// Returns the appropriate material for the object (line or face) given color code. If the code is \"pass through\"\n\t\t// (24 for lines, 16 for edges) then the pass through color code is used. If that is also pass through then it's\n\t\t// simply returned for the subsequent material application.\n\t\tfunction getMaterial( c, colorCode ) {\n\n\t\t\t// if our parent is a passthrough color code and we don't have the current material color available then\n\t\t\t// return early.\n\t\t\tif ( parentIsPassthrough && ! ( colorCode in materialHierarchy ) && ! finalMaterialPass ) {\n\n\t\t\t\treturn colorCode;\n\n\t\t\t}\n\n\t\t\tconst forEdge = c.isLineSegments || c.isConditionalLine;\n\t\t\tconst isPassthrough = ! forEdge && colorCode === MAIN_COLOUR_CODE || forEdge && colorCode === MAIN_EDGE_COLOUR_CODE;\n\t\t\tif ( isPassthrough ) {\n\n\t\t\t\tcolorCode = parentColorCode;\n\n\t\t\t}\n\n\t\t\tlet material = null;\n\t\t\tif ( colorCode in materialHierarchy ) {\n\n\t\t\t\tmaterial = materialHierarchy[ colorCode ];\n\n\t\t\t} else if ( finalMaterialPass ) {\n\n\t\t\t\t// see if we can get the final material from from the \"getMaterial\" function which will attempt to\n\t\t\t\t// parse the \"direct\" colors\n\t\t\t\tmaterial = loader.getMaterial( colorCode );\n\t\t\t\tif ( material === null ) {\n\n\t\t\t\t\t// otherwise throw a warning if this is final opportunity to set the material\n\t\t\t\t\tconsole.warn( `LDrawLoader: Material properties for code ${ colorCode } not available.` );\n\n\t\t\t\t\t// And return the 'missing color' material\n\t\t\t\t\tmaterial = loader.missingColorMaterial;\n\n\t\t\t\t}\n\n\n\t\t\t} else {\n\n\t\t\t\treturn colorCode;\n\n\t\t\t}\n\n\t\t\tif ( c.isLineSegments ) {\n\n\t\t\t\tmaterial = material.userData.edgeMaterial;\n\n\t\t\t\tif ( c.isConditionalLine ) {\n\n\t\t\t\t\tmaterial = material.userData.conditionalEdgeMaterial;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t}\n\n\tgetMainMaterial() {\n\n\t\treturn this.getMaterial( MAIN_COLOUR_CODE );\n\n\t}\n\n\tgetMainEdgeMaterial() {\n\n\t\tconst mat = this.getMaterial( MAIN_EDGE_COLOUR_CODE );\n\t\treturn mat ? mat.userData.edgeMaterial : null;\n\n\t}\n\n\tparseColorMetaDirective( lineParser ) {\n\n\t\t// Parses a color definition and returns a THREE.Material\n\n\t\tlet code = null;\n\n\t\t// Triangle and line colors\n\t\tlet color = 0xFF00FF;\n\t\tlet edgeColor = 0xFF00FF;\n\n\t\t// Transparency\n\t\tlet alpha = 1;\n\t\tlet isTransparent = false;\n\t\t// Self-illumination:\n\t\tlet luminance = 0;\n\n\t\tlet finishType = FINISH_TYPE_DEFAULT;\n\n\t\tlet edgeMaterial = null;\n\n\t\tconst name = lineParser.getToken();\n\t\tif ( ! name ) {\n\n\t\t\tthrow new Error( 'LDrawLoader: Material name was expected after \"!COLOUR tag' + lineParser.getLineNumberString() + '.' );\n\n\t\t}\n\n\t\t// Parse tag tokens and their parameters\n\t\tlet token = null;\n\t\twhile ( true ) {\n\n\t\t\ttoken = lineParser.getToken();\n\n\t\t\tif ( ! token ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( ! parseLuminance( token ) ) {\n\n\t\t\t\tswitch ( token.toUpperCase() ) {\n\n\t\t\t\t\tcase 'CODE':\n\n\t\t\t\t\t\tcode = lineParser.getToken();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'VALUE':\n\n\t\t\t\t\t\tcolor = lineParser.getToken();\n\t\t\t\t\t\tif ( color.startsWith( '0x' ) ) {\n\n\t\t\t\t\t\t\tcolor = '#' + color.substring( 2 );\n\n\t\t\t\t\t\t} else if ( ! color.startsWith( '#' ) ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid color while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EDGE':\n\n\t\t\t\t\t\tedgeColor = lineParser.getToken();\n\t\t\t\t\t\tif ( edgeColor.startsWith( '0x' ) ) {\n\n\t\t\t\t\t\t\tedgeColor = '#' + edgeColor.substring( 2 );\n\n\t\t\t\t\t\t} else if ( ! edgeColor.startsWith( '#' ) ) {\n\n\t\t\t\t\t\t\t// Try to see if edge color is a color code\n\t\t\t\t\t\t\tedgeMaterial = this.getMaterial( edgeColor );\n\t\t\t\t\t\t\tif ( ! edgeMaterial ) {\n\n\t\t\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid edge color while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Get the edge material for this triangle material\n\t\t\t\t\t\t\tedgeMaterial = edgeMaterial.userData.edgeMaterial;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ALPHA':\n\n\t\t\t\t\t\talpha = parseInt( lineParser.getToken() );\n\n\t\t\t\t\t\tif ( isNaN( alpha ) ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid alpha value in material definition' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\talpha = Math.max( 0, Math.min( 1, alpha / 255 ) );\n\n\t\t\t\t\t\tif ( alpha < 1 ) {\n\n\t\t\t\t\t\t\tisTransparent = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LUMINANCE':\n\n\t\t\t\t\t\tif ( ! parseLuminance( lineParser.getToken() ) ) {\n\n\t\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Invalid luminance value in material definition' + LineParser.getLineNumberString() + '.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CHROME':\n\t\t\t\t\t\tfinishType = FINISH_TYPE_CHROME;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PEARLESCENT':\n\t\t\t\t\t\tfinishType = FINISH_TYPE_PEARLESCENT;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RUBBER':\n\t\t\t\t\t\tfinishType = FINISH_TYPE_RUBBER;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'MATTE_METALLIC':\n\t\t\t\t\t\tfinishType = FINISH_TYPE_MATTE_METALLIC;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'METAL':\n\t\t\t\t\t\tfinishType = FINISH_TYPE_METAL;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'MATERIAL':\n\t\t\t\t\t\t// Not implemented\n\t\t\t\t\t\tlineParser.setToEnd();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'LDrawLoader: Unknown token \"' + token + '\" while parsing material' + lineParser.getLineNumberString() + '.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet material = null;\n\n\t\tswitch ( finishType ) {\n\n\t\t\tcase FINISH_TYPE_DEFAULT:\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.3, metalness: 0 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_PEARLESCENT:\n\n\t\t\t\t// Try to imitate pearlescency by making the surface glossy\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.3, metalness: 0.25 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_CHROME:\n\n\t\t\t\t// Mirror finish surface\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0, metalness: 1 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_RUBBER:\n\n\t\t\t\t// Rubber finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.9, metalness: 0 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_MATTE_METALLIC:\n\n\t\t\t\t// Brushed metal finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.8, metalness: 0.4 } );\n\t\t\t\tbreak;\n\n\t\t\tcase FINISH_TYPE_METAL:\n\n\t\t\t\t// Average metal finish\n\t\t\t\tmaterial = new MeshStandardMaterial( { color: color, roughness: 0.2, metalness: 0.85 } );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Should not happen\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tmaterial.transparent = isTransparent;\n\t\tmaterial.premultipliedAlpha = true;\n\t\tmaterial.opacity = alpha;\n\t\tmaterial.depthWrite = ! isTransparent;\n\t\tmaterial.color.convertSRGBToLinear();\n\n\t\tmaterial.polygonOffset = true;\n\t\tmaterial.polygonOffsetFactor = 1;\n\n\t\tif ( luminance !== 0 ) {\n\n\t\t\tmaterial.emissive.set( material.color ).multiplyScalar( luminance );\n\n\t\t}\n\n\t\tif ( ! edgeMaterial ) {\n\n\t\t\t// This is the material used for edges\n\t\t\tedgeMaterial = new LineBasicMaterial( {\n\t\t\t\tcolor: edgeColor,\n\t\t\t\ttransparent: isTransparent,\n\t\t\t\topacity: alpha,\n\t\t\t\tdepthWrite: ! isTransparent\n\t\t\t} );\n\t\t\tedgeMaterial.userData.code = code;\n\t\t\tedgeMaterial.name = name + ' - Edge';\n\t\t\tedgeMaterial.color.convertSRGBToLinear();\n\n\t\t\t// This is the material used for conditional edges\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial = new LDrawConditionalLineMaterial( {\n\n\t\t\t\tfog: true,\n\t\t\t\ttransparent: isTransparent,\n\t\t\t\tdepthWrite: ! isTransparent,\n\t\t\t\tcolor: edgeColor,\n\t\t\t\topacity: alpha,\n\n\t\t\t} );\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial.color.convertSRGBToLinear();\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial.userData.code = code;\n\t\t\tedgeMaterial.userData.conditionalEdgeMaterial.name = name + ' - Conditional Edge';\n\n\t\t}\n\n\t\tmaterial.userData.code = code;\n\t\tmaterial.name = name;\n\n\t\tmaterial.userData.edgeMaterial = edgeMaterial;\n\n\t\tthis.addMaterial( material );\n\n\t\treturn material;\n\n\t\tfunction parseLuminance( token ) {\n\n\t\t\t// Returns success\n\n\t\t\tlet lum;\n\n\t\t\tif ( token.startsWith( 'LUMINANCE' ) ) {\n\n\t\t\t\tlum = parseInt( token.substring( 9 ) );\n\n\t\t\t} else {\n\n\t\t\t\tlum = parseInt( token );\n\n\t\t\t}\n\n\t\t\tif ( isNaN( lum ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tluminance = Math.max( 0, Math.min( 1, lum / 255 ) );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\tcomputeBuildingSteps( model ) {\n\n\t\t// Sets userdata.buildingStep number in Group objects and userData.numBuildingSteps number in the root Group object.\n\n\t\tlet stepNumber = 0;\n\n\t\tmodel.traverse( c => {\n\n\t\t\tif ( c.isGroup ) {\n\n\t\t\t\tif ( c.userData.startingBuildingStep ) {\n\n\t\t\t\t\tstepNumber ++;\n\n\t\t\t\t}\n\n\t\t\t\tc.userData.buildingStep = stepNumber;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tmodel.userData.numBuildingSteps = stepNumber + 1;\n\n\t}\n\n}\n\nexport { LDrawLoader };\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tGroup,\n\tLineSegments,\n\tMatrix3,\n\tMesh\n} from 'three';\n\nimport { mergeBufferGeometries } from './BufferGeometryUtils.js';\n\nclass LDrawUtils {\n\n\tstatic mergeObject( object ) {\n\n\t\t// Merges geometries in object by materials and returns new object. Use on not indexed geometries.\n\t\t// The object buffers reference the old object ones.\n\t\t// Special treatment is done to the conditional lines generated by LDrawLoader.\n\n\t\tfunction extractGroup( geometry, group, elementSize, isConditionalLine ) {\n\n\t\t\t// Extracts a group from a geometry as a new geometry (with attribute buffers referencing original buffers)\n\n\t\t\tconst newGeometry = new BufferGeometry();\n\n\t\t\tconst originalPositions = geometry.getAttribute( 'position' ).array;\n\t\t\tconst originalNormals = elementSize === 3 ? geometry.getAttribute( 'normal' ).array : null;\n\n\t\t\tconst numVertsGroup = Math.min( group.count, Math.floor( originalPositions.length / 3 ) - group.start );\n\t\t\tconst vertStart = group.start * 3;\n\t\t\tconst vertEnd = ( group.start + numVertsGroup ) * 3;\n\n\t\t\tconst positions = originalPositions.subarray( vertStart, vertEnd );\n\t\t\tconst normals = originalNormals !== null ? originalNormals.subarray( vertStart, vertEnd ) : null;\n\n\t\t\tnewGeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\tif ( normals !== null ) newGeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ) );\n\n\t\t\tif ( isConditionalLine ) {\n\n\t\t\t\tconst controlArray0 = geometry.getAttribute( 'control0' ).array.subarray( vertStart, vertEnd );\n\t\t\t\tconst controlArray1 = geometry.getAttribute( 'control1' ).array.subarray( vertStart, vertEnd );\n\t\t\t\tconst directionArray = geometry.getAttribute( 'direction' ).array.subarray( vertStart, vertEnd );\n\n\t\t\t\tnewGeometry.setAttribute( 'control0', new BufferAttribute( controlArray0, 3, false ) );\n\t\t\t\tnewGeometry.setAttribute( 'control1', new BufferAttribute( controlArray1, 3, false ) );\n\t\t\t\tnewGeometry.setAttribute( 'direction', new BufferAttribute( directionArray, 3, false ) );\n\n\t\t\t}\n\n\t\t\treturn newGeometry;\n\n\t\t}\n\n\t\tfunction addGeometry( mat, geometry, geometries ) {\n\n\t\t\tconst geoms = geometries[ mat.uuid ];\n\t\t\tif ( ! geoms ) {\n\n\t\t\t\tgeometries[ mat.uuid ] = {\n\t\t\t\t\tmat: mat,\n\t\t\t\t\tarr: [ geometry ]\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tgeoms.arr.push( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction permuteAttribute( attribute, elemSize ) {\n\n\t\t\t// Permutes first two vertices of each attribute element\n\n\t\t\tif ( ! attribute ) return;\n\n\t\t\tconst verts = attribute.array;\n\t\t\tconst numVerts = Math.floor( verts.length / 3 );\n\t\t\tlet offset = 0;\n\t\t\tfor ( let i = 0; i < numVerts; i ++ ) {\n\n\t\t\t\tconst x = verts[ offset ];\n\t\t\t\tconst y = verts[ offset + 1 ];\n\t\t\t\tconst z = verts[ offset + 2 ];\n\n\t\t\t\tverts[ offset ] = verts[ offset + 3 ];\n\t\t\t\tverts[ offset + 1 ] = verts[ offset + 4 ];\n\t\t\t\tverts[ offset + 2 ] = verts[ offset + 5 ];\n\n\t\t\t\tverts[ offset + 3 ] = x;\n\t\t\t\tverts[ offset + 4 ] = y;\n\t\t\t\tverts[ offset + 5 ] = z;\n\n\t\t\t\toffset += elemSize * 3;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Traverse the object hierarchy collecting geometries and transforming them to world space\n\n\t\tconst meshGeometries = {};\n\t\tconst linesGeometries = {};\n\t\tconst condLinesGeometries = {};\n\n\t\tobject.updateMatrixWorld( true );\n\t\tconst normalMatrix = new Matrix3();\n\n\t\tobject.traverse( c => {\n\n\t\t\tif ( c.isMesh | c.isLineSegments ) {\n\n\t\t\t\tconst elemSize = c.isMesh ? 3 : 2;\n\n\t\t\t\tconst geometry = c.geometry.clone();\n\t\t\t\tconst matrixIsInverted = c.matrixWorld.determinant() < 0;\n\t\t\t\tif ( matrixIsInverted ) {\n\n\t\t\t\t\tpermuteAttribute( geometry.attributes.position, elemSize );\n\t\t\t\t\tpermuteAttribute( geometry.attributes.normal, elemSize );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.applyMatrix4( c.matrixWorld );\n\n\t\t\t\tif ( c.isConditionalLine ) {\n\n\t\t\t\t\tgeometry.attributes.control0.applyMatrix4( c.matrixWorld );\n\t\t\t\t\tgeometry.attributes.control1.applyMatrix4( c.matrixWorld );\n\t\t\t\t\tnormalMatrix.getNormalMatrix( c.matrixWorld );\n\t\t\t\t\tgeometry.attributes.direction.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tconst geometries = c.isMesh ? meshGeometries : ( c.isConditionalLine ? condLinesGeometries : linesGeometries );\n\n\t\t\t\tif ( Array.isArray( c.material ) ) {\n\n\t\t\t\t\tfor ( const groupIndex in geometry.groups ) {\n\n\t\t\t\t\t\tconst group = geometry.groups[ groupIndex ];\n\t\t\t\t\t\tconst mat = c.material[ group.materialIndex ];\n\t\t\t\t\t\tconst newGeometry = extractGroup( geometry, group, elemSize, c.isConditionalLine );\n\t\t\t\t\t\taddGeometry( mat, newGeometry, geometries );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\taddGeometry( c.material, geometry, geometries );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\t// Create object with merged geometries\n\n\t\tconst mergedObject = new Group();\n\n\t\tconst meshMaterialsIds = Object.keys( meshGeometries );\n\t\tfor ( const meshMaterialsId of meshMaterialsIds ) {\n\n\t\t\tconst meshGeometry = meshGeometries[ meshMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( meshGeometry.arr );\n\t\t\tmergedObject.add( new Mesh( mergedGeometry, meshGeometry.mat ) );\n\n\t\t}\n\n\t\tconst linesMaterialsIds = Object.keys( linesGeometries );\n\t\tfor ( const linesMaterialsId of linesMaterialsIds ) {\n\n\t\t\tconst lineGeometry = linesGeometries[ linesMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( lineGeometry.arr );\n\t\t\tmergedObject.add( new LineSegments( mergedGeometry, lineGeometry.mat ) );\n\n\t\t}\n\n\t\tconst condLinesMaterialsIds = Object.keys( condLinesGeometries );\n\t\tfor ( const condLinesMaterialsId of condLinesMaterialsIds ) {\n\n\t\t\tconst condLineGeometry = condLinesGeometries[ condLinesMaterialsId ];\n\t\t\tconst mergedGeometry = mergeBufferGeometries( condLineGeometry.arr );\n\t\t\tconst condLines = new LineSegments( mergedGeometry, condLineGeometry.mat );\n\t\t\tcondLines.isConditionalLine = true;\n\t\t\tmergedObject.add( condLines );\n\n\t\t}\n\n\t\tmergedObject.userData.constructionStep = 0;\n\t\tmergedObject.userData.numConstructionSteps = 1;\n\n\t\treturn mergedObject;\n\n\t}\n\n}\n\nexport { LDrawUtils };\n","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n"],"names":["$ilwiq","parcelRequire","$90a1bf3572dc4d5f$var$_tempVec0","Vector3","$90a1bf3572dc4d5f$var$_tempVec1","$90a1bf3572dc4d5f$var$LDrawConditionalLineMaterial","ShaderMaterial","constructor","parameters","super","uniforms","UniformsUtils","merge","UniformsLib","fog","diffuse","value","Color","opacity","vertexShader","fragmentShader","Object","defineProperties","this","get","set","color","setValues","isLDrawConditionalLineMaterial","$90a1bf3572dc4d5f$var$ConditionalLineSegments","LineSegments","geometry","material","isConditionalLine","$90a1bf3572dc4d5f$var$_ray","Ray","$90a1bf3572dc4d5f$var$isPartType","type","$90a1bf3572dc4d5f$var$LineParser","line","lineNumber","lineLength","length","currentCharIndex","currentChar","seekNonSpace","charAt","getToken","pos0","pos1","substring","getVector","parseFloat","getRemainingString","isAtTheEnd","setToEnd","getLineNumberString","$90a1bf3572dc4d5f$var$LDrawParsedCache","loader","_cache","cloneResult","original","result","faces","map","face","colorCode","vertices","v","clone","normals","faceNormal","conditionalSegments","controlPoints","lineSegments","category","keywords","author","subobjects","fileName","totalFaces","startingBuildingStep","materials","group","async","triedLowerCase","locationState","subobjectURL","lastIndexOf","toLowerCase","fileLoader","FileLoader","manager","setPath","partsLibraryPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","loadAsync","Error","parse","text","getLocalMaterial","indexOf","replace","lines","split","numLines","parsingEmbeddedFiles","currentEmbeddedFileName","currentEmbeddedText","bfcCertified","bfcCCW","bfcInverted","bfcCull","lineIndex","startsWith","setData","lp","lineType","segment","ccw","doubleSided","v0","v1","v2","v3","c0","c1","meta","parseColorMetaDirective","userData","code","console","warn","newKeywords","forEach","keyword","push","trim","token","posX","posY","posZ","m0","m1","m2","m3","m4","m5","m6","m7","m8","matrix","Matrix4","fileMap","inverted","getData","key","Promise","fetchData","then","info","$90a1bf3572dc4d5f$var$getMaterialFromCode","parentColorCode","materialHierarchy","forEdge","$90a1bf3572dc4d5f$var$LDrawPartsGeometryCache","parseCache","info1","faceMaterials","Set","processInfoSubobjects","subobject","promises","i","l","promise","ensureDataLoaded","subobjectInfo","test","loadModel","catch","error","Group","subobjectInfos","all","i3","l3","isGroup","subobjectGroup","decompose","position","quaternion","scale","name","applyMaterialsToMesh","add","children","parentLineSegments","parentConditionalSegments","parentFaces","matrixScaleInverted","determinant","lineColorCode","ls","applyMatrix4","i5","l5","os","i6","l6","tri","reverse","i4","l4","smoothNormals","checkSubSegments","size","subVectors","crossVectors","normalize","$90a1bf3572dc4d5f$var$generateFaceNormals","hashMultiplier","hashVertex","x","y","z","hashEdge","toNormalizedRay","targetRay","direction","scalar","dot","origin","copy","addScaledVector","hashRay","ray","hardEdges","hardEdgeRays","Map","halfEdgeList","rh1","has","rh2","distances","d0","d1","i1","l1","vertCount","i2","index","next","hash","rayHash","found","halfEdge","queue","pop","vertNormals","reverseHash","otherInfo","otherTri","otherIndex","otherNormals","otherVertCount","otherFaceNormal","Math","abs","otherNext","norm","sharedNormal1","sharedNormal2","l2","$90a1bf3572dc4d5f$var$smoothNormals","group1","$90a1bf3572dc4d5f$var$createObject","hasCachedModel","getCachedModel","processIntoMesh","$90a1bf3572dc4d5f$var$sortByMaterial","a","b","elements","elementSize","isConditionalSegments","totalElements","sort","positions","Float32Array","quadArray","Array","bufferGeometry","BufferGeometry","prevMaterial","index0","numGroupVerts","offset","iElem","nElem","elem","j","elemNormals","n","addGroup","edgeMaterial","conditionalEdgeMaterial","Infinity","setAttribute","BufferAttribute","object3d","Mesh","controlArray0","controlArray1","directionArray","$90a1bf3572dc4d5f$export$12d9a9ad6192c950","Loader","materialLibrary","partsCache","setMaterials","missingColorMaterial","MeshStandardMaterial","roughness","metalness","missingEdgeColorMaterial","LineBasicMaterial","missingConditionalEdgeColorMaterial","setPartsLibraryPath","path","url","colorLineRegex","directive","load","onLoad","onProgress","onError","parseModel","computeBuildingSteps","addMaterial","setFileMap","matLib","getMaterial","finalMaterialPass","parentIsPassthrough","c","isLineSegments","traverse","isMesh","isArray","isMaterial","getMainMaterial","getMainEdgeMaterial","mat","lineParser","edgeColor","alpha","isTransparent","luminance","finishType","token1","parseLuminance","toUpperCase","parseInt","isNaN","max","min","transparent","premultipliedAlpha","depthWrite","convertSRGBToLinear","polygonOffset","polygonOffsetFactor","emissive","multiplyScalar","lum","model","stepNumber","buildingStep","numBuildingSteps","$6c11e0c31e042374$export$7732348bb2ed1dd9","static","object","extractGroup","newGeometry","originalPositions","getAttribute","array","originalNormals","numVertsGroup","count","floor","start","vertStart","vertEnd","subarray","addGeometry","geometries","geoms","uuid","arr","permuteAttribute","attribute","elemSize","verts","numVerts","meshGeometries","linesGeometries","condLinesGeometries","updateMatrixWorld","normalMatrix","Matrix3","matrixWorld","attributes","normal","control0","control1","getNormalMatrix","applyNormalMatrix","groupIndex","groups","materialIndex","mergedObject","meshMaterialsIds","keys","meshMaterialsId","meshGeometry","mergedGeometry","$7ePFa","mergeBufferGeometries","linesMaterialsIds","linesMaterialsId","lineGeometry","condLinesMaterialsIds","condLinesMaterialsId","condLineGeometry","condLines","constructionStep","numConstructionSteps","$5aae44c9b1864d53$var$Stats","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","id","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","fg","bg","round","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","maxValue","drawImage","$5aae44c9b1864d53$export$2e2bcd8739ae039","$393e677ed3c566ae$var$envMaps","Overpass","Kloppenheim","Autoshop","$393e677ed3c566ae$var$models","MODEL_LIST","$393e677ed3c566ae$var$initialModel","location","modelName","replaceAll","$393e677ed3c566ae$var$params","multipleImportanceSampling","acesToneMapping","resolutionScale","tilesX","tilesY","samplesPerFrame","envMap","gradientTop","gradientBottom","environmentIntensity","environmentBlur","environmentRotation","cameraProjection","backgroundType","bgGradientTop","bgGradientBottom","backgroundAlpha","checkerboardTransparency","enable","bounces","filterGlossyFactor","pause","floorColor","floorOpacity","floorRoughness","floorMetalness","$393e677ed3c566ae$var$creditEl","$393e677ed3c566ae$var$loadingEl","$393e677ed3c566ae$var$samplesEl","$393e677ed3c566ae$var$floorPlane","$393e677ed3c566ae$var$gui","$393e677ed3c566ae$var$stats","$393e677ed3c566ae$var$sceneInfo","$393e677ed3c566ae$var$renderer","$393e677ed3c566ae$var$orthoCamera","$393e677ed3c566ae$var$perspectiveCamera","$393e677ed3c566ae$var$activeCamera","$393e677ed3c566ae$var$ptRenderer","$393e677ed3c566ae$var$fsQuad","$393e677ed3c566ae$var$controls","$393e677ed3c566ae$var$scene","$393e677ed3c566ae$var$envMap","$393e677ed3c566ae$var$envMapGenerator","$393e677ed3c566ae$var$backgroundMap","$393e677ed3c566ae$var$loadingModel","$393e677ed3c566ae$var$delaySamples","$393e677ed3c566ae$var$animate","requestAnimationFrame","samples","render","innerText","updateFrom","textures","physicalCamera","autoClear","$393e677ed3c566ae$var$resetRenderer","reset","$393e677ed3c566ae$var$onResize","w","innerWidth","h","innerHeight","dpr","setSize","setPixelRatio","aspect","updateProjectionMatrix","orthoHeight","top","bottom","$393e677ed3c566ae$var$updateEnvMap","$891vQ","RGBELoader","texture","environmentMap","environment","dispose","$393e677ed3c566ae$var$updateEnvBlur","blurredEnvMap","generate","envMapInfo","background","$393e677ed3c566ae$var$updateCamera","camera","$393e677ed3c566ae$var$updateModel","body","classList","remove","destroy","LoadingManager","modelInfo","visibility","isTexture","scene","onFinish","removeEmission","emissiveMap","emissiveIntensity","opacityToTransmission","newMaterial","MeshPhysicalMaterial","transmission","$393e677ed3c566ae$var$convertOpacityToTransmission","thickness","side","DoubleSide","postProcess","rotation","box","Box3","setFromObject","sphere","Sphere","getBoundingSphere","setScalar","radius","$4CEV9","MaterialReducer","process","generator","$cVdfP","PathTracingSceneWorker","percent","bvh","attributesArray","tangent","uv","materialIndexAttribute","setTextures","innerHTML","credit","gradientBot","topColor","bottomColor","$jiuw3","GUI","onChange","pathTracingFolder","addFolder","setDefine","Number","toneMapping","ACESFilmicToneMapping","NoToneMapping","resolutionFolder","tiles","open","environmentFolder","PI","makeRotationY","backgroundFolder","backgroundMap","addColor","floorFolder","close","$393e677ed3c566ae$var$buildGui","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","gltf","progress","total","loaded","preloadMaterials","mergeObject","visible","getElementById","WebGLRenderer","antialias","outputEncoding","sRGBEncoding","Scene","PerspectiveCamera","OrthographicCamera","$393e677ed3c566ae$var$orthoWidth","GradientEquirectTexture","PathTracingRenderer","PhysicalPathTracingMaterial","$RPVlj","FullScreenQuad","MeshBasicMaterial","target","blending","CustomBlending","getContextAttributes","$5Rd1x","OrbitControls","BlurredEnvMapGenerator","floorTex","$1EdOY","generateRadialFloorTexture","PlaneGeometry","physicallyCorrectLights","$393e677ed3c566ae$var$init"],"version":3,"file":"index.7e44f4ab.js.map"}